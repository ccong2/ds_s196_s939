{
  "hash": "8d718d2cdacb102ee12f4fdd3862f011",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Download and analyze Census data with ![](../img/Rlogo.png){width=60px}\"\nsubtitle: <span style=\"color:#2C3E50\">11.S196/11.S939 Applied Data Science for Cities</span>\ndate: \"Last Updated 2024-11-12\"\nformat: html\nfilters: \n  - line-highlight\neditor: visual\nexecute: \n  warning: false\n---\n\n\n# Overview\n\nIn this lab, we will use decennial census data and American Community Survey (ACS) data to examine long-term population trends in neighborhoods.\n\nThe [Nathalie P. Voorhees Center](https://voorheescenter.uic.edu/) has conducted research on neighborhood and community improvement in the City of Chicago. In their [Three Cities](https://voorheescenter.uic.edu/chicago_communities/) report, they calculate the average per capita income for each census tract in Chicago for the years 1970, 1980, 1990, 2000, 2010, and 2017, and then compare it to the regional weighted average income. They have found Chicago has become more segregated by income over time and is losing its middle class.\n\n![](../img/lab5_chicago_multiyears.PNG)\n\nIn the following image, the census tracts are classified into \"three cities\": those that have increased their share of regional income by 20% or more, those that have changed by less than 20%, and those that have decreased by 20% or more. The study also summarizes socio-demographic characteristics based on these changes.\n\n![](../img/lab3_chicago_three_cities.PNG)\n\nWe will take the idea of the Voorhees Center's study to examine population change in Chicago. Weâ€™ll look at population by census tracts over multiple years to see if we can categorize tracts as gaining, losing, or staying stable in population.\n\nThese are the packages we are going to use today.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You may need to install the packages: tidycensus, tigris and gt\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tidycensus)\nlibrary(tigris)\nlibrary(gt)\n```\n:::\n\n\n# Step 1 Collect Population Data\n\nTo analyze tract-level population change, we need to gather population data for Chicago across multiple years and make comparisons. In this exercise, we'll obtain population data in four years: 1970, 1990, 2010, and the most recent year 2022.\n\nIf we can assemble a table like below, with rows being the tracts and columns being the years, we can easily graph the trend and calculate the percentage change in population from 1970 to 2022. This percentage change will enable us to categorize areas based on population increases or decreases, similar to the \"three cities\" methodology used by the Voorhees Center.\n\n| Census Tract | 2022 | 2010 | 1990 | 1970 |\n|--------------|:----:|:----:|:----:|:----:|\n| 17031822400  | 6012 | 6226 | 5956 | 4336 |\n| 17031740100  | 3075 | 3048 | 3297 | 4060 |\n| 17031828100  | 5388 | 4844 | 4804 | 5599 |\n| 17031826600  | 4872 | 5540 | 5168 | 6290 |\n\n## Obtain ACS data in 2022 (`get_acs`)\n\nWe will first use `tidycensus` to download data for 2022, you'll need a Census API key (Here is where you can [request one from the census bureau](https://api.census.gov/data/key_signup.html)). After you've signed up for an API key, be sure to activate the key from the email you receive from the Census Bureau so it works correctly.\n\nDeclaring `install = TRUE` when calling `census_api_key()` will install the key for use in future R sessions, which may be convenient for many users.\n\n\n\n```{.default}\ncensus_api_key(\"yourkeyinquotationmarks\", install = TRUE)\n```\n\n\nTo complete the API call for ACS data, you will typically need to specify:\n\n-   A desired geography to look up (for example, tract- or block group-level data)\n-   The variables we want to look up (we have the [complete variable list](https://api.census.gov/data/2021/acs/acs5/variables.html) for 2022 5-year ACS, you can also retrieve this list by calling `load_variables()`)\n-   The state and county names to define your study region.\n-   The census year you want data for.\n-   The survey you'd like to use (such as ACS 1-, or 5-year data)\n\nThe following code returns the number of total population by tract in Cook County, Illinois in 2022. The table I consult is [B01001: Sex by Age](https://data.census.gov/table/ACSDT5Y2020.B01001?q=B01001).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_2022 <- get_acs(\n  geography = \"tract\",\n  state = \"IL\",\n  county = \"Cook\",\n  variables = \"B01001_001\",\n  geometry = TRUE,\n  year = 2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |===================                                                   |  26%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |======================================================================| 100%\n```\n\n\n:::\n:::\n\n\nNow you might have seen our first problem: we don't have the option for getting tract-level data for **cities**. We can only obtained data for Cook County, where Chicago is located, but not for the City of Chicago directly. We will come back to it later in our exercise to cut out tracts within Chicago's spatial boundary. That's why we've included the argument `geometry = TRUE`, which will be needed for our spatial processing.\n\n-   `geometry = TRUE` returns a [simple features](https://r-spatial.github.io/sf/articles/sf1.html) (`sf`) object with spatial information saved for each tract. The returned table will include a `geometry` variable that enables spatial analysis.\n\n## Decennial data (`get_decennial`)\n\nIn addition to `get_acs()`, `tidycensus` also provides `get_decennial()` for retrieving data from the US Decennial Census for the years 2000, 2010, and 2020. The function uses similar arguments, as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_2010 <- get_decennial(\n  geography = \"tract\", \n  state = \"IL\",\n  county = \"Cook\",\n  variables = \"P001001\",\n  geometry = TRUE,\n  year = 2010)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |==========================================================            |  84%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |======================================================================| 100%\n```\n\n\n:::\n:::\n\n\n## Historic Data in 1990 and 1970\n\nUnfortunately we cannot continue to use `get_decennial()` for the 1990 and 1970 data. The main reason is that the Census Bureau has removed the API endpoints for earlier years. Additionally, Census geographiesâ€”which approximate neighborhoods based on populationâ€”can change over time. Some tracts stay the same, but others may split as populations grow or merge when populations decline.\n\nAnalysts often face the challenge of geographic inconsistencies when working with longitudinal data. The Census Bureau's [geographic relationship files](https://www.census.gov/geographies/reference-files/time-series/geo/relationship-files.2020.html) can help show the relationships between geographies over time. To make it easier for researchers, Brown University's [Longitudinal Tract Database](https://s4.ad.brown.edu/projects/diversity/Researcher/Bridging.htm) offers demographic estimates for previous decennial census years - 1970, 1980, 1990, and 2000 - adjusted to match the 2010 boundaries. This means the tract areas and IDs match the 2010 data, with attribute values adjusted based on area or population share to reflect boundary changes over the years.\n\nLet's get familiar with LTDB data and how to use them. Go to the [data download](https://s4.ad.brown.edu/projects/diversity/researcher/LTBDDload/Default.aspx) page. You will need to enter your email address and certify that you will follow terms of use for the data.\n\nReview the data standard descriptions a bit to see what datasets are available. In our analysis, we will only use the Standard Full Data Files for population counts.\n\nIn \"**Download Standard Full Data Files**\", select the year **1990**, click the download button. Then do the same for **1970**. Save the two .csv files into your project folder.\n\nNow we can import these two datasets using `read_csv`. Simultaneously, we'll use `filter()` to extract only the portion for Cook County.\n\n\n\n```{.default}\nF_1990 <- \n  read_csv(\"LTDB_Std_1990_fullcount.csv\") |>\n  filter(county == \"Cook County\" & state == \"IL\")\n\nF_1970 <- read_csv(\"LTDB_Std_1970_fullcount.csv\")|>\n  filter(county == \"Cook County\" & state == \"IL\")\n```\n\n\n\n\n# Step 2 Compile Datasets\n\nNow we have download four datasets we need, we can start planning how to join them for mapping and further analysis. Joins allow us to merge two datasets based on common attributes, such as GEOID in our case. However, after a quick look at these datasets, there are a few things we may immediately notice:\n\n1\\) They have different number of observations. For example, F_2022 (census tracts for the year 2020) contain 1332 observations, F_1970 contains 1317.\n\n> Some census tracts may not have existed in previous years. Our join strategy should prioritize retaining all records from the most recent dataset. Regarding [types of joins](https://mikoontz.github.io/data-carpentry-week/lesson_joins.html), a `left_join` keeps all rows from the dataset on the left in the merged dataset. Similarly, a `right_join` keeps all rows from the right, even if there are no matches in the left.\n\n2\\) They have different number of columns, and the column names are not the same across years. For example, the attribute `GEOID` is named as `TRTID10` in the F_1970 and F_1990 datasets.\n\n> We can retain the columns we need by using `select()` , and apply consistent column names by specifying \\[new name\\] = \\[column name\\] in our select calls.\n\n3\\) If we do a test `left_join`, we will notice another issue from its error message:\n\n\n\n```{.default}\nleft_join(F_2022, F_1990, by = c(\"GEOID\" = \"TRTID10\"))\n```\n\n\n![](../img/lab3_error_in_join.PNG)\n\n> Some of our GEOID columns are saved as characters while others are numeric, preventing them from directly joining. To resolve this, we can use `mutate()` to convert the column type.\n\n> Alternatively, we can specify the column types when reading the data, using the `col_types` argument in `read_csv()`.\n\nWith all these in mind, let's clean up the datasets for joining. In the following code, I have saved them as new datasets (starting naming with S\\_ so that we can keep our original data and come back if we need to)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nS_1970 <- F_1970 |> \n  # select and rename the columns we need\n  select(GEOID = TRTID10, POP1970 = POP70)|> \n  # convert the data type to character\n  mutate(GEOID = as.character(GEOID))\n\nS_1990 <- F_1990 |> \n  select(GEOID = TRTID10, POP1990 = POP90) |> \n  mutate(GEOID = as.character(GEOID))\n\nS_2010 <- F_2010 |> \n  select(GEOID, POP2010 = value) |> \n  # We are preparing data for non-spatial operations, so I'm using st_drop_geometry to exclude the spatial information here. \n  st_drop_geometry()\n\nS_2022 <- F_2022 |> \n  select(GEOID, POP2022 = estimate) |> \n  st_drop_geometry()\n```\n:::\n\n\nSince we read from left to right, we can place the year 2022 on the right and perform `right_join`s. An additional trick: a typical `right_join` only works with two datasets at a time, which means if we want to join four or more datasets, we have to:\n\n\n\n```{.default}\n# Only for showing, do not run\npop_data <- right_join(S_2010, S_2022, by=\"GEOID\")\npop_data <- right_join(S_1990, pop_data, by=\"GEOID\")\npop_data <- right_join(S_1970, pop_data, by=\"GEOID\")\n```\n\n\nHowever, we can do this with less code and repetition using the `reduce()` function from the `purrr` package in combination with `right_join()`. Although we haven't introduced it, [the `purrr` package](https://purrr.tidyverse.org/) in `tidyverse` is designed for working with functional programming concepts like loops and recurrence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data <-\n  reduce(list(S_1970, S_1990, S_2010, S_2022), \n         right_join, by = \"GEOID\")\n```\n:::\n\n\nOur joined result `pop_data` now has the same number of observations as the 2022 dataset - because we placed it on the right side of the `reduce()` function, allowing `right_join()` to apply sequentially to the left. Now we have a final result structured as intended from the beginning.\n\n![](../img/lab3_example_dataset.PNG)\n\n# Step 3 Calculate and summarize changes\n\n## Compare population changes\n\nWe have compiled population data in one table. To make this table more informative, let's calculate the percentage change in population for each tract, and classify tracts based on whether their population has significantly decreased, increased, or remained largely unchanged, following the Voohver Center's approach.\n\n![](../img/lab3_example_result.PNG)\n\nTry to insert your own code to achieve the following, before you read along to the next chunk:\n\n1.  Calculate the population change from 1970 to 2022 by computing the percentage increase (POP2022 - POP1970) / POP1970. Use `mutate()` for this and create a new column called \"change\".\n\n2.  Create another column called \"status\" to classify the changes. Label changes less than 10% as \"Low Change\". Label changes greater than 10% as \"Growing\", and less than -10% as \"Declining\".\n\n    Note that we also have missing values (NAs) in `change` due to differences in census tracts, where some tracts in 2020 did not exist in earlier years. To account for that I included a fourth category in `status` named \"Uncategorized\".\n\nHow to populate values based on multiple conditions? The traditional and more straightforward approach is using the `if_else()` statement. Combining it with `mutate`, it looks something like this:\n\n\n\n```{.default}\n# Only for showing, do not run\npop_data |> \n  mutate(status = ifelse(change < -0.1, \"declining\",\n                ifelse(change > 0.1, \"growing\",\n                ifelse(is.na(change), \"uncategorized\", \"low change\"))))\n```\n\n\nHowever, `dplyr` offers a more concise solution. [Check out `case_when`](https://dplyr.tidyverse.org/reference/case_when.html), which simplifies handling multiple conditions by eliminating the need for nested if else statements within multiple parentheses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data <- pop_data |> \n  mutate(change = (POP2022 - POP1970)/POP1970)|> \n  mutate(status = case_when(\n    is.na(change) ~ \"Uncategorized\",\n    change > 0.10 ~ \"Group 1 - Growing\",\n    change < -0.10 ~ \"Group 2 - Declining\",\n    TRUE ~ \"Group 3 - Low Change\"\n  ))\n```\n:::\n\n\n## Create summary tables\n\nWhen you are ready preparing the dataset in the last step. we can use `group_by()` and `summarise()` to find out how many tracts are in each category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data |> \n  group_by(status) |>    \n  summarise(num_tracts = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 2\n  status               num_tracts\n  <chr>                     <int>\n1 Group 1 - Growing           392\n2 Group 2 - Declining         621\n3 Group 3 - Low Change        273\n4 Uncategorized                46\n```\n\n\n:::\n:::\n\n\nSpeaking of summary tables, `gt()`Â is another powerful tool for creating presentable and customizable tables with ease. For instance, we can add a few more lines in the previous code to enhance this table by adding titles and coloring. There are also [many other](https://gt.rstudio.com/articles/gt.html) [styling options](https://rfortherestofus.com/2023/08/table-theme-gt) available.\n\n\n::: {.cell source-line-numbers='4-7'}\n\n```{.r .numberLines .cell-code}\npop_data |> \n  group_by(Status = status) |> \n  summarise(`Number of Tracts` = n()) |> \n  gt() |> \n  tab_header(title = \"Change in Population, 1970-2022\",\n             subtitle = \"Cook County, IL\") |> \n  tab_options(column_labels.background.color = 'dodgerblue4')\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"plwvnhofew\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#plwvnhofew table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#plwvnhofew thead, #plwvnhofew tbody, #plwvnhofew tfoot, #plwvnhofew tr, #plwvnhofew td, #plwvnhofew th {\n  border-style: none;\n}\n\n#plwvnhofew p {\n  margin: 0;\n  padding: 0;\n}\n\n#plwvnhofew .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#plwvnhofew .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#plwvnhofew .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#plwvnhofew .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #104E8B;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#plwvnhofew .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #104E8B;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#plwvnhofew .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#plwvnhofew .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#plwvnhofew .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#plwvnhofew .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#plwvnhofew .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#plwvnhofew .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#plwvnhofew .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#plwvnhofew .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#plwvnhofew .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#plwvnhofew .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#plwvnhofew .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#plwvnhofew .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#plwvnhofew .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#plwvnhofew .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#plwvnhofew .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#plwvnhofew .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#plwvnhofew .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#plwvnhofew .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#plwvnhofew .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#plwvnhofew .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#plwvnhofew .gt_left {\n  text-align: left;\n}\n\n#plwvnhofew .gt_center {\n  text-align: center;\n}\n\n#plwvnhofew .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#plwvnhofew .gt_font_normal {\n  font-weight: normal;\n}\n\n#plwvnhofew .gt_font_bold {\n  font-weight: bold;\n}\n\n#plwvnhofew .gt_font_italic {\n  font-style: italic;\n}\n\n#plwvnhofew .gt_super {\n  font-size: 65%;\n}\n\n#plwvnhofew .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#plwvnhofew .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#plwvnhofew .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#plwvnhofew .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#plwvnhofew .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#plwvnhofew .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#plwvnhofew .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#plwvnhofew .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#plwvnhofew div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal\" style>Change in Population, 1970-2022</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Cook County, IL</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Status\">Status</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Number of Tracts\">Number of Tracts</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Group 1 - Growing</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">392</td></tr>\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Group 2 - Declining</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">621</td></tr>\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Group 3 - Low Change</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">273</td></tr>\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Uncategorized</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">46</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nPopulation of each census tract, with a trend line showing the average population for each group:\n\nThe code is more detailed than needed for your exercise; feel free to skip ahead or refer to the relevant parts\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data_summary <- pop_data |> \n  filter(!is.na(change)) |> \n  pivot_longer(col = POP1970:POP2022, \n               names_to = \"year\", values_to = \"population\") |>\n  mutate(year = str_replace(year, \"POP\", \"\"))\n\npop_data_summary|>\n  group_by(status, year) |> \n  mutate(mean_population = mean(population, na.rm = TRUE)) |> \n  ungroup() |> \n  ggplot() +\n    geom_point(aes(x = year, y = population, color = status), \n               alpha = 0.2, size = 1) +\n    geom_line(aes(x = year, y = mean_population, color = status, \n                  group = status), linewidth = 1) +\n    facet_wrap(~status)+\n    labs(title = \"Cook County Population Trends by Census Tract and Group Over Time\")+\n    theme_classic()+\n    theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# Step 4 Clip out Chicago\n\nAs you might have noticed, we are still working with Cook County so far. How is Chicago located within Cook County exactly? Let's visualize that using another census-related package `tigris`.\n\n`tigris` fetches census geographics. You can think of it as a programmatic way of downloading TIGER/Line Shapefiles. It uses geographic entities as [function names](https://github.com/walkerke/tigris). For example, `tracts()` indicates that you want to download tract boundaries, and `county()` indicates you want to download county boundaries, and so on.\n\nThe function `place()` fetches census-designated place. The city of Chicago is one of such places in Illinois.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(tigris_use_cache=TRUE) # This is to allow tigris to use caching for downloaded data so that we don't need to fetch the same data again every time you need it.\n\n# Download the boundary of Chicago. \nchi_bnd <- \n  places(state = \"IL\") |> \n  filter(NAME == \"Chicago\")\n```\n:::\n\n\nRecall that we have included spatial information in our `F_2022` dataset, which means we can direct plot it. We can plot both `F_2022` and the Chicago boundary together to see the overlay.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = F_2022)+ # boundary of Cook County\n  geom_sf(data = chi_bnd, color = \"blue\", \n          linewidth = 0.5, fill = NA) # boundary of Chicago\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/compare-1.png){width=672}\n:::\n:::\n\n\nOkay, now we have:\n\n-   `pop_data`, a plain table, but contains population change over time and our categorization of all tracts;\n-   `F_2022`, a sf object, containing spatial geometry for all tracts.\n-   `chi_bnd`, a sf object, containig spatial geometry for Chicago boundary.\n\nWe can join the spatial information back to the summary table `pop_data` , then perform `st_intersection()` to extract the overlapping census tracts within Chicago.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nchi_pop_data <- \n  # join our result table to the spatial file F_2022\n  right_join(pop_data, F_2022, by = \"GEOID\") |> \n  # make sure it is a simple feature object\n  st_as_sf() |> \n  # Cut it to the Chicago boundary\n  st_intersection(chi_bnd) |> \n  # Keep the columns we need\n  select(GEOID, POP1970:status)\n```\n:::\n\n\nTake a look at your `chi_pop_data`, if everything goes well, we will have a dataset that looks like this.\n\n![](../img/lab3_final_check.PNG)\n\nWe now have a column `status` indicating whether each tract's population in Chicago is growing, declining, or relatively stable. This will be useful for incorporating into ggplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chi_pop_data) + \n  geom_sf(aes(fill = status))\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/plot_chicago_1-1.png){width=672}\n:::\n:::\n\n\nFeel free to modify the colors, add text, or apply any design touches as you wish.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chi_pop_data) + \n  geom_sf(aes(fill = status), color = alpha(\"white\", 0.5))+\n  scale_fill_manual(values = c(\n    \"Group 1 - Growing\" = \"#FC8D59\",\n    \"Group 2 - Declining\" = \"#D73027\",\n    \"Group 3 - Low Change\" = \"#FDCC8A\",\n    \"Uncategorized\" = \"#B0BEC5\"\n  )) +\n  labs(title = \"Change in population, 1970-2022\",\n       subtitle = \"City of Chicago, by Census tract\")+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nWe can also plot the population of each year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_breaks <- c(0, 2500, 5000, 7000, 16000)\nchi_pop_data|> \n  filter(!is.na(change)) |> \n  pivot_longer(col = POP1970:POP2022, \n               names_to = \"year\", values_to = \"population\") |>\n  mutate(year = str_replace(year, \"POP\", \"\"),\n         pop_bin = cut(population, breaks = custom_breaks, right = FALSE))|> \n  ggplot() +\n    geom_sf(aes(fill = pop_bin), color = NA) +\n    facet_wrap(~year, nrow = 1, strip.position = \"bottom\")+\n    scale_fill_brewer(palette = \"OrRd\", name = \"Population\") +\n    labs(title = \"Chicago Population by Census Tract\")+\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nOf course there are caveats of working with longitudinal data\n\nChicago as a whole is growing, but the growth is not happening evenly. Chicago has experienced population decline since its peak in the mid-20th century, attributed to factors including the decline of manufacturing, suburban expansion, and demographic shifts - a phenomenon identified by urban scholars as \"Shrinking Cities\". We will use historic population census data to show how the trend manifests in Chicago and how it affects across different areas of the city.\n\n# Exercise\n\nSee if these work:\n\nChicago is not only growing but also facing segregation challenges. In this assignment, analyze how the percentage of the Black population has shifted from 1970 to 2022. Use historical data for 1970 and retrieve 2022 data using the `tidycensus` package. Calculate the percentage of the Black population in each year, compare the changes over time, and create a \"three-cities\" type graph to visualize areas that show different changes.\n",
    "supporting": [
      "lab5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}