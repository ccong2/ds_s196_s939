{
  "hash": "3a52143f9bb8d91f8d2dbda4ea77bec1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Download and analyze Census data with ![](../img/Rlogo.png){width=60px}\"\nsubtitle: <span style=\"color:#2C3E50\">11.S196/11.S939 Applied Data Science for Cities</span>\ndate: \"Last Updated 2024-11-20\"\nformat: html\nfilters: \n  - line-highlight\neditor: visual\nexecute: \n  warning: false\n---\n\n\n# Overview\n\nIn this lab, we will use Decennial Census data and American Community Survey (ACS) data to examine long-term population trends in neighborhoods.\n\nThe [Nathalie P. Voorhees Center](https://voorheescenter.uic.edu/) has conducted research on neighborhood and community improvement in the City of Chicago. In their [Three Cities](https://voorheescenter.uic.edu/chicago_communities/) report, they calculate the average per capita income for each census tract in Chicago for the years 1970, 1980, 1990, 2000, 2010, and 2017, and then compare it to the regional weighted average income. They have found Chicago has become more segregated by income over time and is losing its middle class.\n\n![](../img/lab5_chicago_multiyears.PNG)\n\nIn their study, census tracts are classified into \"three cities\": those that have increased their share of regional income by 20% or more from 1970 to 2016, those that have changed by less than 20%, and those that have decreased by 20% or more. The study also summarizes socio-demographic characteristics in these areas.\n\n![](../img/lab3_chicago_three_cities.PNG)\n\nWe will take the idea of the Voorhees Center's study to examine population change in Chicago. We’ll look at population by census tracts over decades to see if we can categorize tracts as gaining, losing, or staying stable in population.\n\nHere are the packages we are going to use today.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You may need to install the packages: tidycensus, tigris and gt\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tidycensus)\nlibrary(tigris)\nlibrary(gt)\n```\n:::\n\n\n# Step 1 Collect Population Data\n\nTo analyze tract-level population change, we need to gather population data for Chicago across multiple years and make comparisons. In this exercise, we'll obtain population data in four years: 1970, 1990, 2010, and 2020.\n\nIf we can assemble a table like the one below, with rows representing tracts and columns being the years, we will be able to see the trend and calculate the percentage change in population from 1970 to 2020. This percentage change will enable us to categorize areas based on population increases or decreases, similar to the \"three cities\" methodology used by the Voorhees Center.\n\n| Census Tract | 1970 | 1990 | 2010 | 2022 |\n|--------------|:----:|:----:|:----:|:----:|\n| 17031822400  | 4336 | 5956 | 6226 | 6012 |\n| 17031740100  | 4060 | 3297 | 3048 | 3075 |\n| 17031828100  | 5599 | 4804 | 4844 | 5388 |\n| 17031826600  | 6290 | 5168 | 5540 | 4872 |\n\n## Review the Process of Making Census API Calls\n\nWe will first review how to use `tidycensus` to download data for the most recent year 2022. You'll need a Census API key (Here is where you can [request one from the census bureau](https://api.census.gov/data/key_signup.html)). After you've signed up for an API key, remember to activate the key from the email you receive.\n\nDeclaring `install = TRUE` when calling `census_api_key()` will install the key for use in future R sessions, which may be convenient for many users.\n\n\n\n```{.default}\ncensus_api_key(\"yourkeyinquotationmarks\", install = TRUE)\n```\n\n\n(If you're having trouble with your key, restarting R might fix it!)\n\nAs a review, to complete the API call for ACS data, you will typically need to specify:\n\n-   A desired **geography** to look up (i.e. data **by** what area)\n-   The **variable IDs** we want to look up (we have the [table codes](https://censusreporter.org/topics/table-codes/), and the [complete variable list](https://api.census.gov/data/2022/acs/acs5/variables.html) for 2022 5-year ACS.\n-   The state and county names to define your study region.\n-   The census year you want data for.\n-   The survey you'd like to use (such as ACS 1-, or 5-year data)\n\nThe following code returns the number of total population by tract in **Cook County, Illinois** (where Chicago is in) in 2022. The table I consult is [B01001: Sex by Age](https://data.census.gov/table/ACSDT5Y2022.B01001?q=B01001).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_2022 <- get_acs(\n  geography = \"tract\",\n  state = \"IL\",\n  county = \"Cook\",\n  variables = \"B01001_001\",\n  year = 2022)\n```\n:::\n\n\nAs discussed in class, we can choose to download multiple variables, reshape the table, calculate percentages, and then add the geometry column for quick mapping.\n\n-   `output = \"wide\"` downloads data is in wide format, where each variable (e.g., totpop, Male_25to29) is represented as a separate column, and each row represent one tract.\n-   `geometry = TRUE` returns a [simple features](https://r-spatial.github.io/sf/articles/sf1.html) (`sf`) object with spatial information saved for each tract. The returned table will include a `geometry` variable that enables spatial analysis.\n\nFor example, display one or more age groups, such as the male and female population aged 25–29:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nB01001_Vars <- c(totpop = \"B01001_001\",\n                 Male_25to29 = \"B01001_011\", # look up the variable IDs\n                 Female_25to29 = \"B01001_035\")\n\nF_2022 <- get_acs(\n  geography = \"tract\",\n  state = \"IL\",\n  county = \"Cook\",\n  variables = B01001_Vars, \n  output = \"wide\",\n  geometry = TRUE,\n  year = 2022)\n```\n:::\n\n\n#### Map 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_2022 |> \n  # remove all Margin-of-error columns\n  select(-ends_with(\"M\")) |> \n  # Clean up the column names\n  rename_with(~ str_remove(., \"E$\")) |> \n  # Prepare for a faceted map\n  pivot_longer(cols = c(Male_25to29, Female_25to29),\n               names_to = \"gender_group\", values_to = \"group_pop\") |> \n  \n  ggplot() +\n    geom_sf(aes(fill = group_pop/totpop))+\n    facet_wrap(~ gender_group) +\n    labs(fill = \"Proportion of Total Population\")+\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Decennial data (`get_decennial`)\n\nIn addition to `get_acs()`, `tidycensus` also provides `get_decennial()` for retrieving data from the US Decennial Census for the years 2000, 2010, and 2020. The function uses similar arguments, as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_2010 <- get_decennial(\n  geography = \"tract\", \n  state = \"IL\",\n  county = \"Cook\",\n  variables = \"P001001\",\n  geometry = TRUE,\n  year = 2010)\n```\n:::\n\n\nSo far you might have seen our first problem: for both API calls, we don't have the option for getting **tract-level data for** **cities -** because tracts are not nested within places. We will come back to it later to cut out tracts within Chicago's spatial boundary. That's why we've included the argument `geometry = TRUE`, which will be needed for our spatial processing.\n\nOur second problem is that these two datasets have different number of observations. F_2022 contains 1332 tracts, F_2010 contains 1319 tracts. Additionally, more than 40 GEOIDs have changed between the datasets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetdiff(F_2022$GEOID, F_2010$GEOID)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"17031320101\" \"17031804316\" \"17031809402\" \"17031380600\" \"17031824128\"\n [6] \"17031490200\" \"17031804315\" \"17031330103\" \"17031824126\" \"17031844700\"\n[11] \"17031829904\" \"17031844600\" \"17031630600\" \"17031829903\" \"17031828508\"\n[16] \"17031820204\" \"17031803613\" \"17031330101\" \"17031806006\" \"17031804204\"\n[21] \"17031460800\" \"17031806005\" \"17031803614\" \"17031828507\" \"17031824508\"\n[26] \"17031824127\" \"17031824125\" \"17031824124\" \"17031824129\" \"17031804313\"\n[31] \"17031820203\" \"17031803615\" \"17031804314\" \"17031320102\" \"17031809401\"\n[36] \"17031803616\" \"17031804513\" \"17031824509\" \"17031804514\" \"17031804312\"\n[41] \"17031804203\" \"17031330102\" \"17031804512\" \"17031612200\"\n```\n\n\n:::\n:::\n\n\nThe U.S. Census Bureau [adjust geographies every 10 years](https://www.census.gov/programs-surveys/acs/technical-documentation/table-and-geography-changes/2010/geography-changes.html). Census geographies are based on population, and population change over time. Some tracts stay the same, but others may split as populations grow or merge when populations decline. The Census Bureau keeps [geographic relationship files](https://www.census.gov/geographies/reference-files/time-series/geo/relationship-files.2020.html) to document the relationships between geographies over time.\n\nAdditionally, we cannot continue to use `get_decennial()` for the 1990 and 1970 data for our analysis. The main reason is that the Census Bureau has removed the API endpoints for earlier years.\n\n## Longitudinal Tract Database (LTDB) Data Download\n\nAnalysts often face the challenge of geographic inconsistencies when working with longitudinal data. To make it easier for researchers, Brown University's [Longitudinal Tract Database](https://s4.ad.brown.edu/projects/diversity/Researcher/Bridging.htm) (LTDB) offers demographic estimates for decennial census years from 1970 to 2020 adjusted to match the 2010 census tract boundaries. This means the tract areas and IDs match the 2010 geography, with attribute values recalculated based on population share.\n\nLet's get familiar with LTDB data and how to use them. Go to the [data download](https://s4.ad.brown.edu/projects/diversity/researcher/LTBDDload/Default.aspx) page. You will need to enter your email address and certify that you will follow terms of use for the data.\n\nReview the data standard descriptions a bit to see what datasets are available. In our analysis, we will only use the Standard Full Data Files for population counts.\n\nIn \"**Download Standard Full Data Files**\", select the year **1970**, click the download button. Then do the same for **1990** and **2020**. Save the three .csv files into your project folder.\n\nNow we can import these datasets using `read_csv`. Simultaneously, we'll use `filter()` to extract only the portion for Cook County.\n\n\n\n```{.default}\nF_1970 <- read_csv(\"LTDB_Std_1970_fullcount.csv\")|>\n  filter(county == \"Cook County\" & state == \"IL\")\n  \nF_1990 <- \n  read_csv(\"LTDB_Std_1990_fullcount.csv\") |>\n  filter(county == \"Cook County\" & state == \"IL\")\n  \nF_2020 <- \n  read_csv(\"ltdb_std_2020_fullcount.csv\") |>\n  filter(substr(TRTID2010, 1, 5) == \"17031\")\n  \n# We will not use the 2022 data for the rest of the lab, so feel free to remove it if you'd like:\nrm(F_2022)\n```\n\n\n\n\n# Step 2 Compile Datasets\n\nNow we have download data of the four years: 1970, 1990, 2010, and 2020, we can start planning how to join them for mapping and further analysis. Joins allow us to merge datasets based on common attributes, such as GEOID in our case. However, we'll notice a few things after a quick look at these datasets:\n\n1\\) The column names for GEOID and population are not the same across years. For example, the attribute `GEOID` is named as `TRTID10` in the F_1970 and F_1990 datasets.\n\n> We can retain the columns we need by using `select()` , and apply consistent column names by specifying \\[new name\\] = \\[column name\\] in our select calls.\n\n2\\) If we do a test `left_join`, we will notice another issue from its error message:\n\n\n\n```{.default}\nleft_join(F_2010, F_1990, by = c(\"GEOID\" = \"TRTID10\"))\n```\n\n\n![](../img/lab3_error_in_join.PNG)\n\n> Some of our GEOID columns are saved as characters while others are numeric, preventing them from directly joining. To resolve this, we can use `mutate()` and `as.character()` to convert the attribute type.\n\n> Alternatively, we can specify the column types while reading the data, using the `col_types` argument in `read_csv()`.\n\nWith all these in mind, let's clean up the datasets for joining. In the following code, I have saved them as new datasets (starting naming with \"S\\_\" so that we can keep our original data and come back if we need to).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nS_1970 <- F_1970 |> \n  # select and rename the columns we need\n  select(GEOID = TRTID10, POP1970 = POP70)|> \n  # convert the data type to character\n  mutate(GEOID = as.character(GEOID))\n\nS_1990 <- F_1990 |> \n  select(GEOID = TRTID10, POP1990 = POP90) |> \n  mutate(GEOID = as.character(GEOID))\n\nS_2010 <- F_2010 |> \n  select(GEOID, POP2010 = value) |> \n  # We are preparing data for non-spatial joins at this point, so I'm using st_drop_geometry() to exclude the spatial information here. \n  st_drop_geometry()\n\nS_2020 <- F_2020 |> \n  select(GEOID = TRTID2010, POP2020 = pop20) |> \n  mutate(GEOID = as.character(GEOID)) \n```\n:::\n\n\nRegarding types of joins, a `left_join` keeps all rows from the left dataset, even with no matches in the right, while a `right_join` keeps all rows from the right. In our case, small discrepancies exist because some tracts did not exist before 1990. For practical purposes, we should prioritize the most recent geographies. Given the left-to-right reading habit, it might make sense to place the 2020 data on the right side and perform `right_join`s.\n\nAn additional trick: a typical `xxx_join` function only works with two datasets at a time, which means if we want to join four or more datasets, we have to:\n\n\n\n```{.default}\n# Only for showing, do not run #\npop_data <- right_join(S_2010, S_2020, by=\"GEOID\")\npop_data <- right_join(S_1990, pop_data, by=\"GEOID\")\npop_data <- right_join(S_1970, pop_data, by=\"GEOID\")\n```\n\n\nHowever, we can do this with less code and repetition using the `reduce()` function from the `purrr` package in combination with `right_join()`. Although we haven't introduced it, [the `purrr` package](https://purrr.tidyverse.org/) in `tidyverse` is designed for working with functional programming concepts like loops and recurrence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data <-\n  reduce(list(S_1970, S_1990, S_2010, S_2020), \n         right_join, by = \"GEOID\")\n```\n:::\n\n\nOur joined result `pop_data` now has the same number of rows as the 2020 dataset - because we placed it on the right and applied `right_join()` sequentially to the left. Now we have a final result structured as intended from the beginning.\n\n![](../img/lab3_example_dataset.PNG)\n\n# Step 3 Calculate and summarize changes\n\n## Compare population changes\n\nWe now have compiled population data in one table. Our next step is to calculate the percentage change in population for each tract and classify the tracts based on whether their population has significantly decreased, increased, or remained largely unchanged in the past \\~50 years, following the Voohver Center's approach.\n\n![](../img/lab3_example_result.PNG)\n\nTry to insert your own code to achieve the following, before you read along to the next chunk:\n\n1.  Calculate the population change from 1970 to 2020 by computing the percentage increase (POP2020 - POP1970) / POP1970. Use `mutate()` for this and create a new column called \"change\".\n\n2.  Create another column called \"status\" to classify the changes. Label the changes less than 10% as \"Low Change\". Label changes greater than 10% as \"Growing\", and less than -10% as \"Declining\".\n\n    Note that we also have a small number of missing values (NAs) in `change` because some 2010 tracts did not exist in earlier years. To account for that I included a fourth category in `status` named \"Uncategorized\".\n\nHow to populate values based on multiple conditions? The traditional and more straightforward approach is using the `if_else()` statement. Combining it with `mutate`, it looks something like this:\n\n\n\n```{.default}\n# Only for showing, do not run #\npop_data |> \n  mutate(status = ifelse(change < -0.1, \"declining\",\n                ifelse(change > 0.1, \"growing\",\n                ifelse(is.na(change), \"uncategorized\", \"low change\"))))\n```\n\n\nHowever, `dplyr` offers a more concise solution. [Check out `case_when`](https://dplyr.tidyverse.org/reference/case_when.html), which simplifies handling multiple conditions by eliminating the need for nested `if else` statements within multiple parentheses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data <- pop_data |> \n  mutate(change = (POP2020 - POP1970)/POP1970)|> \n  mutate(status = case_when(\n    is.na(change) ~ \"Uncategorized\",\n    change > 0.10 ~ \"Group 1 - Growing\",\n    change < -0.10 ~ \"Group 2 - Declining\",\n    TRUE ~ \"Group 3 - Low Change\"\n  ))\n```\n:::\n\n\n## Create summary tables\n\nAs the dataset is now prepared, we can use `group_by()` and `summarise()` to find out how many tracts are in each category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data |> \n  group_by(status) |>    \n  summarise(num_tracts = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  status               num_tracts\n  <chr>                     <int>\n1 Group 1 - Growing           422\n2 Group 2 - Declining         639\n3 Group 3 - Low Change        256\n4 Uncategorized                 2\n```\n\n\n:::\n:::\n\n\nSpeaking of summary tables, `gt()` is another powerful tool for creating customizable and polished tables with ease. For instance, we can add a few more lines in the previous code to enhance this table by adding titles and coloring. There are also [many other](https://gt.rstudio.com/articles/gt.html) [styling options](https://rfortherestofus.com/2023/08/table-theme-gt) available.\n\n\n::: {.cell source-line-numbers='4-7'}\n\n```{.r .numberLines .cell-code}\npop_data |> \n  group_by(Status = status) |> \n  summarise(`Number of Tracts` = n()) |> \n  gt() |> \n  tab_header(title = \"Change in Population, 1970-2020\",\n             subtitle = \"Cook County, IL\") |> \n  tab_options(column_labels.background.color = 'dodgerblue4')\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"aywjkduuck\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#aywjkduuck table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#aywjkduuck thead, #aywjkduuck tbody, #aywjkduuck tfoot, #aywjkduuck tr, #aywjkduuck td, #aywjkduuck th {\n  border-style: none;\n}\n\n#aywjkduuck p {\n  margin: 0;\n  padding: 0;\n}\n\n#aywjkduuck .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#aywjkduuck .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#aywjkduuck .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#aywjkduuck .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #104E8B;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#aywjkduuck .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #104E8B;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#aywjkduuck .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#aywjkduuck .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#aywjkduuck .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#aywjkduuck .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#aywjkduuck .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#aywjkduuck .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#aywjkduuck .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#aywjkduuck .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#aywjkduuck .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#aywjkduuck .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aywjkduuck .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#aywjkduuck .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#aywjkduuck .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#aywjkduuck .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aywjkduuck .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#aywjkduuck .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aywjkduuck .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#aywjkduuck .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aywjkduuck .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#aywjkduuck .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aywjkduuck .gt_left {\n  text-align: left;\n}\n\n#aywjkduuck .gt_center {\n  text-align: center;\n}\n\n#aywjkduuck .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#aywjkduuck .gt_font_normal {\n  font-weight: normal;\n}\n\n#aywjkduuck .gt_font_bold {\n  font-weight: bold;\n}\n\n#aywjkduuck .gt_font_italic {\n  font-style: italic;\n}\n\n#aywjkduuck .gt_super {\n  font-size: 65%;\n}\n\n#aywjkduuck .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#aywjkduuck .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#aywjkduuck .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#aywjkduuck .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#aywjkduuck .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#aywjkduuck .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#aywjkduuck .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#aywjkduuck .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#aywjkduuck div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal\" style>Change in Population, 1970-2020</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Cook County, IL</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Status\">Status</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Number of Tracts\">Number of Tracts</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Group 1 - Growing</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">422</td></tr>\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Group 2 - Declining</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">639</td></tr>\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Group 3 - Low Change</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">256</td></tr>\n    <tr><td headers=\"Status\" class=\"gt_row gt_left\">Uncategorized</td>\n<td headers=\"Number of Tracts\" class=\"gt_row gt_right\">2</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n# Step 4 Clip out Chicago\n\nAs you might have noticed, we are still working with Cook County so far. How is Chicago located within Cook County exactly? Let's visualize that with the help of another census-related package `tigris`.\n\n## Obtain census geographies\n\n`tigris` fetches census geographies. You can think of it as a programmatic way of downloading TIGER/Line Shapefiles. It uses geographic entities as [function names](https://github.com/walkerke/tigris). For example, `tracts()` indicates that you want to download tract boundaries, and `county()` indicates you want to download county boundaries, and so on.\n\nThe function `place()` fetches the boundary for census-designated places. The city of Chicago is one of such places in Illinois.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(tigris_use_cache=TRUE) # This is to allow tigris to use caching for downloaded data so that we don't need to fetch the same data again the next time you need it.\n\n# Download the boundary of Chicago. \nchi_bnd <- \n  places(state = \"IL\") |> \n  filter(NAME == \"Chicago\")\n```\n:::\n\n\nRecall that we have included spatial geometry for census tracts in our `F_2010` dataset. We can plot both `F_2010` and the Chicago boundary together to see the overlay.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = F_2010)+ # boundary of Cook County\n  geom_sf(data = chi_bnd, color = \"blue\", \n          linewidth = 0.5, fill = NA) # boundary of Chicago\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nOkay, now we have:\n\n-   `F_2010`: A spatial object containing geometry for all tracts in Cook County.\n-   `pop_data`: A table with tract-level population change in Cook County, including our \"growing, declining, low change\" categorizations.\n-   `chi_bnd`: A spatial object of Chicago's boundary.\n\nWe can first attach the spatial information of `F_2010` back to `pop_data`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchi_pop_data <- \n  # join geometry to our result table \n  left_join(pop_data, F_2010, by = \"GEOID\") |> \n  # make sure it is a simple feature object\n  st_as_sf() \n```\n:::\n\n\nAnd then take the intersection of the census tracts to fit within Chicago's boundary.\n\n## Write a function\n\nWhen doing intersections on census data, we often face the challenge of estimating the portion of population within boundaries. One method we often use is estimating the population based on the ratio of the intersected area to the total area.\n\n![](../img/lab5_split.png)\n\nIf you're already familiar with this concept, we can now encapsulate the \"proportional split\" approach into a reusable function. **Writing a function** allows us to automate repetitive tasks, such as \"calculating the area ratio of overlapping regions and comparing the intersected area to the total area every time when two shapefiles intersect\".\n\nWriting your own function can be a bit less intuitive, but it works like outlining the entire process using \"placeholder\" variables. After the process is built, you can run the function by providing actual variables as inputs to replace those placeholders.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a function to calculate area ratio of overlapping areas\n# Perform intersection between a \"census tract\" and a \"boundary\"\n\ncalculate_area_ratio <-\n  function(census_tracts, boundary) {\n    census_tracts <-\n      census_tracts |> mutate(total_area = st_area(geometry))\n    \n    intersected_tracts <- st_intersection(census_tracts, boundary)\n    \n    intersected_tracts <- intersected_tracts |>\n      st_make_valid() |>\n      mutate(\n        intersect_area = st_area(geometry),\n        area_ratio = as.numeric(intersect_area / total_area)\n      ) |> \n      filter(as.numeric(intersect_area) > 0)\n    return(intersected_tracts)\n  }\n```\n:::\n\n\nThen, we can run the function we have defined, `calculate_area_ratio()` , on our two spatial object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First prepare them with the correct CRS\n# Chicago uses State Plane Illinois East (ftUS), EPSG:3435\n# https://spatialreference.org/ref/epsg/3435/\nchi_pop_data <- chi_pop_data |> st_transform(3435)\nchi_bnd <- chi_bnd |> st_transform(3435)\n\n# Next input our two spatial objects into the function\nchi_pop_data <-  \n  calculate_area_ratio(census_tracts = chi_pop_data, \n                       boundary = chi_bnd)\n```\n:::\n\n\nAfter running the function, we will have a intersected spatial object that contains an `area_ratio` column, which is used for calculating population share.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchi_pop_data <- \n  chi_pop_data |>  \n  mutate(POP1970 = POP1970 * area_ratio,\n         POP1990 = POP1990 * area_ratio,\n         POP2010 = POP2010 * area_ratio,\n         POP2020 = POP2020 * area_ratio) |> \n  select(GEOID:status)\n```\n:::\n\n\nTake a look at your `chi_pop_data`, if everything goes well, we will have a smaller dataset (869 rows) that looks like this.\n\n![](../img/lab3_final_check.PNG)\n\n# Summary Graphs Examples\n\nBased on the results, we may have a few observations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prepare the data for visualization: reshape structures, adjust column names\npop_data_summary <- chi_pop_data |> \n  st_drop_geometry() |> \n  filter(status != \"Uncategorized\") |> \n  pivot_longer(col = POP1970:POP2020, \n               names_to = \"year\", values_to = \"population\") |>\n  mutate(year = str_replace(year, \"POP\", \"\"))\n```\n:::\n\n\nThe total population of the City of Chicago has been, largely, declining, a trend that can be attributed to many factors including the decline of manufacturing and suburban expansion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data_summary|>\n  group_by(year) |> \n  summarise(tot_population = sum(population, na.rm = TRUE)) |> \n  ggplot() +\n  geom_line(aes(x = year, y = tot_population, group = 1), \n            color = \"blue\", linewidth = 1) +\n  labs(x = \"Year\", y = \"Total Population\",\n       title = \"Chicago total population\")+\n  theme_classic()+\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nBut within the city, some areas are still growing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data_summary|>\n  group_by(status, year) |> \n  mutate(sum_population = sum(population, na.rm = TRUE)) |> \n  ungroup() |> \n  \n  ggplot() +\n  geom_line(aes(x = year, y = sum_population, color = status, \n                group = status), linewidth = 1) +\n  labs(x = \"Year\", y = \"Total Population\",\n       title = \"Chicago tract population summed by subgroup\")+\n  theme_classic()+\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nWhere are the places are gaining population and where are losing population? The column status in the data will be useful for incorporating into ggplot. We can set up our colors to create a \"three-group\" map.\n\n#### Map 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chi_pop_data) + \n  geom_sf(aes(fill = status), color = alpha(\"white\", 0.5))+\n  scale_fill_manual(values = c(\n    \"Group 1 - Growing\" = \"#D73027\",\n    \"Group 2 - Declining\" = \"#FDCC8A\",\n    \"Group 3 - Low Change\" = \"#FC8D59\",\n    \"Uncategorized\" = \"#B0BEC5\"\n  )) +\n  labs(title = \"Change in population, 1970-2020\",\n       subtitle = \"City of Chicago, by Census tract\",\n       caption = \"Brown University Longitudinal Tract Data Base. Map showing Census Tract boundaries in 2010\")+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nTract populations for each year can also be visualized in a side-by-side plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_breaks <- c(0, 2500, 5000, 7000, 16000)\nchi_pop_data |> \n  filter(status != \"Uncategorized\") |> \n  pivot_longer(col = POP1970:POP2020, \n               names_to = \"year\", values_to = \"population\") |>\n  mutate(year = str_replace(year, \"POP\", \"\"),\n         pop_bin = cut(population, breaks = custom_breaks))|> \n  ggplot() +\n    geom_sf(aes(fill = pop_bin), color = NA) +\n    facet_wrap(~year, nrow = 1, strip.position = \"bottom\")+\n    scale_fill_brewer(palette = \"OrRd\", name = \"Population\") +\n    labs(title = \"Chicago Population by Census Tract\", ,\n       caption = \"Brown University Longitudinal Tract Data Base. Map showing Census Tract boundaries in 2010\")+\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](lab5_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nPopulation trends are not evenly experienced across Chicago's neighborhoods, which show clustering of both growth and decline. South Chicago, for example, is losing residents, while northern and western areas are experiencing growth. Additional research and background resources on Chicago can provide more insight into the city's changing dynamics, for instance:\n\n[Shifting Population Trends in Chicago and the Chicago Metro Area](https://uofi.app.box.com/s/rgf5h8oc8bnjq9ua2463oolvdj23qyun/file/970587325860)\n\n[The Socioeconomic Change of Chicago’s Community Areas (1970-2010)](https://voorheescenter.red.uic.edu/wp-content/uploads/sites/122/2017/10/Voorhees-Center-Gentrification-Index-Oct-14.pdf)\n\n# Exercise\n\nChicago is not only growing unevenly but also facing segregation challenges. In this assignment, continue to investigate by examining patterns of population distribution across different area of the city. Please start a new Quarto Document to document your work. Include brief explanations of your analysis process, along with your code, and provide any interpretations of the results.\n\n1.  **Use the CENSUS API** to download race data from the 2018-2022 5-year ACS for Cook County. Create a faceted map showing the percentage distribution of the non-Hispanic White, non-Hispanic Black, and Hispanic populations across census tracts in the City of Chicago in 2022. Your map should resemble [Map 1], but colors and styles can be different.\n\n    -   Check out the table B03002. Which variables you might need to use to complete this API call?\n\n    -   Start by calculating the population percentages for Cook County before narrowing down to the city of Chicago.\n\n    -   The spatial intersection does not impact the percentage calculations. You don’t need to worry about the area ratio for this task as racial composition remains the same regardless of the intersected area.\n\nAfter completing the map, you can compare it with [Map 2] we made in the lab. How does it relate to the demographic trends and socio-economic factors in the resources you've reviewed? What insights might this add to your understanding of the city?\n\n2.  Use two years of historical LTDB population data **(1970 and 2020)** to calculate the percentage increase in population for tracts in **Cook County**. Create a map similar to [Map 2] to visualize census tracts that have shown significant increasing and decreasing trends over the past five decades.\n\n    -   You will reuse your intermediate results in this lab (possibly continuing with `pop_data`), and there's no need to narrow the data to Chicago.\n\n    -   The goal is to examine how areas surrounding Chicago are changing, especially when Chicago itself is experiencing an overall population decline. How are these surrounding areas growing or changing during the same period\n\nWhat does the result tell you? Are there additional details you would like to know or further analyses you think would enhance our understanding in the context of this study?\n\n# Work Product\n\nPlease submit the Rendered HTML file to Canvas **by the end of day, Tuesday, Nov 26.** As always, make sure you have included `embed-resources: true` in your YAML header before you render for submission.\n\nAlso, the `get_acs()` function tends to produce messages and progress bar to the output. You can use chunk option `#| results: hide` to suppress that.\n",
    "supporting": [
      "lab5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}