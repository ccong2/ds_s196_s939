---
title: "Build Shiny Apps with ![](../img/Rlogo.png){width=60px}"
subtitle: <span style="color:#2C3E50">11.S196/11.S939 Applied Data Science for Cities</span>
date: "Last Updated `r Sys.Date()`"
format: html
filters: 
  - line-highlight
editor: visual
---

# Overview

In this lab, we’ll guide you through building a Shiny app to turn our Airbnb Leaflet map into an interactive version. It’s a gentle introduction to the Shiny app process, with plenty of potential for scaling up if you’re interested in exploring further in the future!

A Shiny app is a plain and humble **.R** file, partly because it was developed long before Quarto documents and other tools. So, we will create the project folder for this week, then start a new R script file (**File -\> New File -\> R script**). Save the file with the name "**app.R**".

# Shiny Essentials

As a brief review, a Shiny app is built on two essential components: **the User Interface (UI) and the Server**. These are fancy names, but UI is what you see in your browser, controlling the layout and appearance of the app. The Server is your R session on your laptop, handling data processing behind the scenes.

A Shiny app always starts from a three-line template:

```{r}
#| eval: false

ui <- fluidPage(
  # *Input functions go here
  # *Output functions go here
)

server <- function(input, output) {
  # output$id <- render*function(input$id)
}

shinyApp(ui, server)
```

In `ui`, you can define the...

1.  Components that **acquire user inputs** (e.g. sliders, select box, radio buttons, etc.)
2.  Components that will **display outputs** (e.g. plots, maps, tables, text boxes, etc.)
3.  Type of interface (e.g. heights and width, sidebars, navigation bars, etc.)

In `server`, most of the app's dynamic behavior occurs. The `server` works as an open, running function that takes the `input` from `ui`, produces the result in concert with [a `render` function](https://shiny.posit.co/r/getstarted/build-an-app/reactive-flow/render-functions.html), then display the result to the `output` space on the `ui`.

The last line `shinyApp(ui, server)` combines these two parts together so that the app will *react* to the user input (`ui`) by re-rendering (`server`) continuously while the app is running.

# Visualize airbnb data in Shiny

We love `flexdashboard` because it’s simple to use and perfect for showing both visualizations and the data behind them. In many cases, it's all we need. However, Shiny allows you to build web applications that respond to user input, so users can decide what to display and explore different results on the fly.

The choice really depends on what you need—it’s not that Shiny is "better." Good analysis should always come first, and these tools are only here to help make your insights more accessible.

## Preparation

Let’s continue using the city you worked on in your Lab 4 report, and build on your existing Leaflet code. Please put the **"listings.csv"** file that you downloaded for lab 4 report into your project folder. Then copy and paste the setup code below into your R script:

```{r}
#| eval: false

# install.packages("shiny")
library(shiny)
library(leaflet)
library(tidyverse)

airbnb <- read_csv("listings.csv")

ui <- fluidPage(
  # *Input functions go here
  # *Output functions go here
)

server <- function(input, output) {
  # output$id <- render*function(input$id)
}

shinyApp(ui, server)
```

## Design your UI

First, we’ll walk through how to build [a Shiny app like this](https://ccong2.shinyapps.io/lab3example/) for your city. In this example, there is one slider that allows users to control the price range, and the map will only display listings that fall within the selected price range.

The UI for this app consists of two main elements: the slider and the map. The slider is an **input** element, which means it receives user input, while the map is the **output** that displays the results.

UI is built using **input and output functions**. The slider is linked to an input function, and the Leaflet map is linked to an output function. You can explore [a complete list of input and output functions](https://shiny.posit.co/r/components/).

For this particular UI, I will first add a few lines of code to describe the slider’s appearance. The `inputId` is required, and you can give it any name that you can later use to reference the slider.

```{r}
#| eval: false
#| class-source: "numberLines"
#| source-line-numbers: "2-4"
ui <- fluidPage(
  sliderInput(inputId = "price_slider",
              label = "Choose a price range",
              min = 1, max = 1500, value = c(500, 1000)),
  # *Output functions
)
```

The output is a Leaflet map, generated using the `outputLeaflet()` function. We will use this function here for the output object and assign it a name for reference.

```{r}
#| eval: false
#| class-source: "numberLines"
#| source-line-numbers: "5"
ui <- fluidPage(
  sliderInput(inputId = "price_slider",
              label = "Choose a price range",
              min = 1, max = 1500, value = c(500, 1000)),
  leafletOutput(outputId = "map")
)
```

Without changing anything in the server part, let's click "Run App" to see what we have now. A viewer will open up showing the layout of your app: a slider and a empty area ready for output map. Close the viewer. In order to actually show the map, we will need to process the data in the `server` function.

## Assemble inputs and outputs in server

Inside the curly braces of the server function template, we will write all the instructions to create the Leaflet map. It is recommended to compose the code in three steps:

**First, we will establish the connections between particular inputs and outputs.** Right now we have only one input object `price_slider`, and one output object `map`, we can either write it down or mentally build this connection that the `output$map` will depend on the values of `input$price_slider`.

```{r}
#| eval: false
server <- function(input, output) {
  output$map <- input$price_slider
}
```

**Next, choose a render function that is associated with your output function.** When building the UI we have reserved an area for `leafletOutput()`, so in the server we must use a `renderLeaflet()` function to produce the corresponding result. The connections between all output functions and render functions are also listed in the [Shiny instruction page](https://shiny.posit.co/r/getstarted/build-an-app/reactive-flow/render-functions.html).

```{r}
#| eval: false
#| class-source: "numberLines"
#| source-line-numbers: "2"
server <- function(input, output) {
  output$map <- renderLeaflet(
    input$price_slider
  )
}
```

**Lastly, we'll process the input variable.** That means we will consider how user inputs - price ranges - influence the map. We are displaying only those within the selected price range by filtering out listings with prices outside the slider's limits. In other words, we will use the slider's two end values (`input$price_slider[1]` and `input$price_slider[2]`) to `filter` the `airbnb` dataset.

```{r}
#| eval: false
#| class-source: "numberLines"
#| source-line-numbers: "2-13"
server <- function(input, output) {
  output$map <- renderLeaflet({
    # make a filtered dataset
    filtered_airbnb <- 
      airbnb |> 
      filter(price >= input$price_slider[1] & price < input$price_slider[2])
    
    # pass the filtered dataset to a simple leaflet map
    filtered_airbnb |> 
      leaflet() |> 
        addTiles() |> 
        addCircleMarkers()
  })
}
```

All parentheses should be properly paired up. Note: We added a pairs of curly braces inside `renderLeaflet()`. This is necessary because `{}` allows us to group multiple lines of code into a single block that will be evaluated together.

Once you’ve completed the server code, click "Run App" again to check if the slider and reactive map appear as expected.

## Add map styles

Everything you created for your previous Leaflet map will still work here! I’d suggest going back to your code from Exercise 4 and copying the `leaflet()` code to replace the basic version we used in the server. However, be mindful of two things:

1.  You will need copy the color palette and the popup format too. If you have defined more elements for your map, make sure that they are all copied over. Place them inside the `renderLeaflet()` function.

```{r}
#| eval: false
#| class-source: "numberLines"
#| source-line-numbers: "8-14"

server <- function(input, output) {
  output$map <- renderLeaflet({
    # make a filtered dataset
    filtered_airbnb <- 
      airbnb |> 
      filter(price >= input$price_slider[1] & price < input$price_slider[2])
    
    popup_format <-
      paste0("<b>Name:</b>", filtered_airbnb$name, "<br>",
             "<b>Host Name: </b>", filtered_airbnb$host_name,"<br>",
             "<b>Price: </b>", "$", filtered_airbnb$price, "<br>"
      )
    
    pal <- colorFactor(palette = "RdYlGn", domain = airbnb$room_type)
    
    # pass the filtered dataset to a simple leaflet map
    filtered_airbnb |> 
      leaflet() |>
      addProviderTiles(providers$CartoDB.Positron,
                       group = "CartoDB Positron") |>
      addProviderTiles("Esri.WorldImagery", 
                       group = "ESRI World Imagery") |>
      addProviderTiles(providers$CartoDB.DarkMatter, 
                       group = "CartoDB Dark") |>
      addCircleMarkers(data = filtered_airbnb,
                       fillColor = ~pal(room_type),
                       fillOpacity = 1,
                       stroke = FALSE,
                       radius = 2,
                       popup = popup_format, 
                       group = "Airbnb Listings") |>
      addLegend(
        position = 'topright',
        pal = pal,
        values = airbnb$room_type,
        title = "Room Type") |> 
      addLayersControl(
        baseGroups = c("CartoDB Positron", 
                       "ESRI World Imagery",
                       "CartoDB Dark"),
        overlayGroups = c("Airbnb Listings", "City Boundary")
      )
  })
}
```

Some style elements might need adjustments for the filtered dataset. In our case, the popups use the filtered dataset because the data shown in the popups matches the markers in the filtered map view. We’ll update them to use `filtered_airbnb` .

```{r}
#| eval: false
#| class-source: "numberLines"
#| source-line-numbers: "9,10,11,25"

server <- function(input, output) {
  output$map <- renderLeaflet({
    # make a filtered dataset
    filtered_airbnb <- 
      airbnb |> 
      filter(price >= input$price_slider[1] & price < input$price_slider[2])
    
    popup_format <-
      paste0("<b>Name:</b>", filtered_airbnb$name, "<br>",
             "<b>Host Name: </b>", filtered_airbnb$host_name,"<br>",
             "<b>Price: </b>", "$", filtered_airbnb$price, "<br>"
      )
    
    pal <- colorFactor(palette = "RdYlGn", domain = airbnb$room_type)
    
    # pass the filtered dataset to a simple leaflet map
    filtered_airbnb |> 
      leaflet() |>
        addProviderTiles(providers$CartoDB.Positron,
                         group = "CartoDB Positron") |>
        addProviderTiles("Esri.WorldImagery", 
                         group = "ESRI World Imagery") |>
        addProviderTiles(providers$CartoDB.DarkMatter, 
                         group = "CartoDB Dark") |>
        addCircleMarkers(data = filtered_airbnb,
                         fillColor = ~pal(room_type),
                         fillOpacity = 1,
                         stroke = FALSE,
                         radius = 2,
                         popup = popup_format, 
                         group = "Airbnb Listings") |>
        addLegend(
          position = 'topright',
          pal = pal,
          values = airbnb$room_type,
          title = "Room Type") |> 
        addLayersControl(
          baseGroups = c("CartoDB Positron", 
                         "ESRI World Imagery",
                         "CartoDB Dark"),
          overlayGroups = c("Airbnb Listings", "City Boundary")
        )
  })
}
```

Once you’ve finished editing the server code, click "Run App" and check if the price range works correctly, and if the colors and popups display as expected.

# Exercise

We will continue to work from here to add a selection box to your application! The goal is to let users pick a neighborhood from a list. When a neighborhood is selected, the map will zoom in on it and display only the listings within that area. Your result should look like [this example](https://ccong2.shinyapps.io/lab6report/).

Here’s how we’ll approach this task:

1.  **Add an Input Function to the UI:**\
    We will need to include a new input function in the `ui` for the selection box. Consider [what type of input](https://shiny.posit.co/r/components/) is appropriate and what arguments are needed to define its appearance and behavior.

2.  **Filter the Data in the Server:**\
    In the server, we’ll update the logic to display only one neighborhood at a time. This involves further filtering the data, working with `filtered_airbnb` to narrow it down based on neighborhood names.

    You may want to include the neighborhood boundaries on your map. Inside Airbnb has provided [GeoJSON file of neighbourhoods of the city](https://insideairbnb.com/get-the-data/). GeoJSON is another format for spatial data primarily used for web mapping. You can read this format of file and add them to your map just like any other spatial data layer:

    ```{r}
    #| eval: false
    library(sf)
    neighborhood_boundary <- st_read("neighbourhoods.geojson")
    ```

3.  **Zoom the Map to the Neighborhood:**\
    To center and zoom the map on the chosen neighborhood, we’ll use the `setView` function that we have seen in Lab 4. My approach is to calculate the average longitude and latitude of the filtered dataset and use these values to adjust the map’s view dynamically.

    ```{verbatim}
    # Add two lines before leaflet()
    mid_long <- mean(filtered_airbnb$longitude, na.rm = TRUE)
    mid_lat <- mean(filtered_airbnb$latitude, na.rm = TRUE)

    # Use lat and lon which represents the center of your region
    leaflet() |>
      ...
      setView(lng = mid_long, lat = mid_lat, zoom = 14) |> 
    ```

Give it a try! Once you’ve checked everything, click "Run App" to see your shiny app in action. If any errors pop up, don’t worry—we’ll work through them together.

This is all you need to complete for your exercise—no need to make further improvements. If you find this application useful, feel free to incorporate it into your own project.

# Publish your Shiny dashboard

[shinyapp.io](https://www.shinyapps.io/) is the best place for you to host, display, and distribute your Shiny apps. The platform is designed for Shiny and R language so all your reactive elements will work seamlessly. If it's the first time you connect with shinyapp.io, you may have to sign up for an account.

Check if your script is named **app.R**. This is the naming convention for Shiny apps, as it allows the platform to recognize and properly deploy your application.

To publish your app, just like with other documents, use the **blue "Publish" button**. Then, select the option for ShinyApps.io. [Here](https://statsandr.com/blog/how-to-publish-shiny-app-example-with-shinyapps-io/#step-by-step-guide) is a step-by-step screenshot guide for setting up your account, initializing your account with a token, and hosting with shinyapps.io.

At the step of choose "Publish Files From...", make sure to include the data files as well. In our case, we should select "app.R", "listings.csv", and "neighbourhood.geojson".

![](/img/lab6publish.PNG){width="590"}

When you see it working like this, it means it’s being successfully published.

![](/img/lab6publishing.PNG){width="590"}

# Work Product

Please submit your **app.R** and **the link to your Shiny app** to Canvas. **You can paste your link into the submission comments area.** Please upload your work by the end of day, **Wednesday, Dec 4**.
