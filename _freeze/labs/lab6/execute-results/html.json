{
  "hash": "9886d0c6c8e49b0167c02b163a8378cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Build ShinyApp with Flexdashboard and ![](../img/Rlogo.png){width=60px}\"\nsubtitle: <span style=\"color:#2C3E50\">11.S954 Applied Data Science for Cities</span>\ndate: \"Last Updated 2024-08-29\"\nformat: html\neditor: visual\n---\n\n\n# Shiny Essentials\n\nAs a brief review, a ShinyApp comprises two essential components: **the User Interface (UI) and the Server**. The UI dictates the app's appearance, defining the layout and visual elements, while the Server handles the underlying logic and data processing, enabling dynamic, real-time interactions.\n\nA ShinyApp typically starts from a three-line template:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(shiny)\n\nui <- fluidPage(\n  # *Input functions\n  # *Output functions\n)\n\nserver <- function(input, output) {\n  # output$id <- render*function(input$id)\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\nIn `ui`, you can define the...\n\n1.  Type of interface (e.g. `fluidPage`),\n2.  Structure (panels, layout, etc.),\n3.  Components that **acquire user inputs** (choose a corresponding [`Input` function](https://mastering-shiny.org/basic-ui.html#inputs)). Each input component must have a unique ID.\n4.  Components that will **display outputs** (choose a corresponding [`Output` function](https://mastering-shiny.org/basic-ui.html#outputs)). Each output component must have a unique ID.\n\nIn `server`, most reactivity happens. The `server` works as an open, running function that takes the input and output defined and acquired from `ui`, and then produces the result in concert with [a `render` function.](https://shiny.posit.co/r/getstarted/build-an-app/reactive-flow/render-functions.html)\n\nThe relationship between the UI and the Server is established by `shinyApp(ui, server)` so that the app will *react* to the user input (`ui`) by re-rendering (`server`) *continuously* while the app is running.\n\n# Flexdashboard + Shiny\n\nShiny apps are commonly integrated with other dashboard frameworks (e.g. [Shiny Dashboard](https://rstudio.github.io/shinydashboard/)) to enhance their communicative capabilities, as this allows for the utilization of pre-designed elements without the necessity for the developers to specify every detail. Given our familiarity with `flexdashboard`, it is comparatively easy to transform the dashboard you've created into a reactive Shiny app.\n\n## Preparation\n\nLet's copy and paste the files you used for creating your flexdashboard for **lab 4** to your current working directory. This is what my current working directory looks like, it contains my Rproj. file, my flexdashboard.Rmd, and a data folder. In my data folder, I have the airbnb.rds that I used for the flexdashboard.\n\n![](../img/lab6_structure.PNG){width=\"325\"}\n\nKnit your flexdashboard and make sure it works. Suppose that you have created a two-column dashboard with one map on the left and two charts on the right. We will work from here and add reactive features.\n\n## Customize your flexdashboard structure\n\nYou'll first need to modify 5 places in your `flexdashboard.Rmd` to restructure it to work with Shiny.\n\n![](../img/lab6_5places.png){width=\"597\"}\n\n1.  Add `runtime: shiny` to the YAML header at the top of the document. This specifies that the Shiny package will be used to handle reactive content.\n\n2.  Load the libraries. The packages you used may be different from what is shown above. But you can simply add `library(shiny`) to the list of packages you've already used in your flexdashboard.\n\n3.  Add a new code chunk ***{r data}*** where we will load and work with local data. Include the code chunk options `message=FALSE, warning=FALSE, results='hide'` .\n\n4.  Create a ***sidebar*** column. You can simply copy and paste a Column header and the dashed-line divider from your code. But make sure to add the attribute `.sidebar`. I have also changed the column width to 200 pixels.\n\n5.  Slightly adjust the column width for your maps and charts. I have changed the two columns to 500 and 300 pixels, respectively. The total number of pixels of your sidebar + two columns should be 1,000.\n\n## Load and prepare your data\n\nJust like a normal .Rmd, your Shiny app code will run line by line or chunk by chunk. To keep it organized, we are dedicating one code chunk for loading libraries, and the second one for working with global data. In your code chunk ***{r data}***, read in your `airbnb` data:\n\n`airbnb <- readRDS(\"data/airbnb.rds\")`\n\n**If your flexdashboard involves downloading census geography data, the best practice is to relocate those lines of code here as well.**\n\n## Work with the implicit UI and Server\n\nBuilding on top of a flexdashboard framework, the process of constructing our app is simplified. We don't need to explicitly define a ui and a server - the connection between inputs and outputs happens implicitly. What it means to us is that we only need to:\n\n-   In our **`sidebar`** column, directly enter **input functions**\n\n-   In your **`Chart A-C`** areas, directly enter **render functions**\n\nYour initial structure should look like this:\n\n![](../img/lab6_initialstructure.png){width=\"577\"}\n\n## Fill in your input functions\n\nFill in the `sliderInput` and `selectInput` with their required arguments. I'm giving them an `inputId` of `price_range` and `nbh_name`, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsliderInput(inputId = \"price_range\", label = \"Select a price range\",\n                  min = 0, max = 1000, value = c(0, 500))\nselectInput(inputId = \"nbh_name\", label = \"Select a neigborhood\",\n              choices = unique(airbnb$neighborhood))\n```\n:::\n\n\n## Complete your render functions\n\nConsider one of your **Plotly charts** as an example. First, wrap all the code you used to create this chart into the curly braces of `renderPlotly({})`.\n\nWhenever you choose a neighborhood, it results in the **filtering** of a subset from the original airbnb data. To make your original code for creating the bar chart responsive to your inputs, you will need to incorporate a few lines like the following (right after `airbnb |>`), calling the input IDs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenderPlotly({\n  g <- airbnb |> \n        filter(neighborhood == input$nbh_name, \n        price >= input$price_range[1],       \n        price < input$price_range[2]) |>  \n    group_by(room_type) |> \n    summarise(median_price = median(price)) |> \n    ggplot() + \n      geom_col(aes(x = room_type, y = median_price), fill = \"#62A0CA\", width = 0.5) + \n    theme_bw()+\n    labs(x = \"Room Type\", y = \"Median Price\")+\n    theme(axis.text.x = element_text(size = 7))\n    ggplotly(g)\n})\n```\n:::\n\n\nFor your **Leaflet map**, there are a few additional things to do. But first, wrap all your code related to creating your leaflet map into the curly braces of `renderLeaflet({})`.\n\n1.  The dataset for your map should also react to your input, requiring a similar filtering process. I'm assigning the filtered results to a new object, `df_map`, replacing the original `airbnb` object that exists at multiple places in this code chunk. Here it requires your careful decisions about where to perform replacements and where not to.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_map <- airbnb |> \n    filter(neighborhood == input$nbh_name,\n    price >= input$price_range[1],\n    price < input$price_range[2])\n```\n:::\n\n\n2.  Adjust the `setView` function to zoom in on the selected neighborhood rather than the entire region. My approach is using the average longitude and latitude of the subset data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add these two lines before leaflet()\nmid_long <- mean(df_map$longitude, na.rm = TRUE)\nmid_lat <- mean(df_map$latitude, na.rm = TRUE)\n\n# Replace the original lat and lon which represents the center of your region\nleaflet() |>\n  ...\n  setView(lng = mid_long, lat = mid_lat, zoom = 14)\n```\n:::\n\n\n**Give it a try!** Now your Shiny dashboard should work. **Save your file, then click \"Run Document\"**. If some errors show up, that's fine, and we will figure it out! You can find my final code [here](https://drive.google.com/file/d/1vuu8yQsbuCq7lJ0hsT6t6kKM7N2Hqwfd/view?usp=sharing) for troubleshooting.\n\n# Exercise\n\nYour map probably does not have neighborhood boundaries yet - if I guess right, there is only a city boundary. The neighborhood data points seem to be floating within an unbounded area. To add neighborhood boundaries, please navigate again to the [Inside Airbnb](http://insideairbnb.com/get-the-data) data download page, find the city you worked on, and download the `neighbourhoods.geojson` to your data folder.\n\nThen I will leave it to you to display the neighborhood boundaries in the way you like!\n\n# Publish your Shiny dashboard\n\n[shinyapp.io](https://www.shinyapps.io/) is probably the best place for you to host, display, and distribute your Shiny apps. The platform is designed for Shiny and R language so all your reactive elements will work seamlessly. If it's the first time you connect with shinyapp.io, you may have to sign up and obtain a token.\n\n[Here](https://statsandr.com/blog/how-to-publish-shiny-app-example-with-shinyapps-io/) is a step-by-step screenshot guide for setting up and hosting with `shinyapps.io`.\n\n# Work Product\n\nThere is no deadline or grading for this lab. If you find the procedure useful, feel free to incorporate it into your own project!\n",
    "supporting": [
      "lab6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}