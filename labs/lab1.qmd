---
title: "Get started with ![](../img/Rlogo.png){width=60px}"
subtitle: <span style="color:#2C3E50">11.S196/11.S939 Applied Data Science for Cities</span>
date: "Last Updated `r Sys.Date()`"
format: html
editor: visual
---

This practice exercise provides some more structured exploration and practice with **Quarto Document** (in R Markdown format). We will mix Markdown sections with code chunks, build familiarity with basic data types, and experiment with importing a tabular dataset. Because this is an in-class exercise, there is nothing you need to submit---the goal is to apply what we have read and seen in the lectures.

```{r include=FALSE}
library(tidyverse)
```

# Work with Quarto Documents

## Set up a New Project

We have talked about files paths in class, and the importance of explicitly setting a directory to work out of. Most of the time we can use `setwd()`, this works fine until when you want to move your working folder to another computer or share your work. If you explicitly set your working directory in the code, it won't be able to access the directory that doesn't exist on another computer.

In our labs, we are going to use **R Projects** to organize our works and make sure we don't lose files during transfers. R projects organize all files related to a project in one place and setting up relative file paths. Let's start by setting up a project for our exercise.

Launch RStudio, then click **File - New Project...** A dialog box will open up. Select **New Directory**, then **New Project.** Here, you can create a new folder to save everything related to this project. For example, I navigated to my D:/Fall24 folder and created a new folder there called Lab 1:

![](../img/lab1_project.PNG){width="450"}

Click the button "Create Project". R will take a second to refresh. Then you will see in your **Files** tab that you have been directed to your current working directory: D:/Fall24/Lab 1. You will also see a **.Rproj** file in that folder.

![](../img/lab1_files_tab.PNG){width="450"}

The .Rproj file is the "key" that R references all project-related files. If you save all files related to Lab 1 in this folder, all relative paths remain intact and consistently applied.

*Note: In future labs, I may provide you with a project folder containing data. As long as you launch RStudio by double-clicking the **.Rproj** file, you will be taken directly to the project's home directory.*

## Practice formatting text with Quarto

Now go to **File - New File - Quarto Document** to create a new Quarto document. The prompt shown below will appear. Type in a document title (e.g. Lab 1) and your name. Keep the radio button for HTML selected.

![](../img/lab1_quarto.PNG){width="450"}

You will then see a template file. At the very top you will see the [YAML](https://en.wikipedia.org/wiki/YAML) (or "Yet Another Markdown Language") header which begins and ends with three dashes `---`. The YAML header determines how your document will be rendered to your desired output format. Now it specifies the title, author, output format and text editor.

To get an idea of how everything works, let's click the **"Render"** button on top of your toolbar.

When prompted, give this file a name, it will be saved in the folder where your ".Rproj" file is, as a .qmd file.

You will see a formatted document in a web browser. Switch between them back and forth to see where each part of the code is placed in the rendered HTML file.

Now we can add a new line to the YAML header:

> date: \<insert the date that the file is created\>.

Render it again and see where the difference is.

There can be other options specified in the YAML, particularly if you are rendering to a format other than HTML (see [the reading](https://r4ds.had.co.nz/r-markdown-formats.html) from this week).

On the very left of this toolbar, click the **"Source"** button to switch Markdown editing mode. These sections of text typically explain or provide context for the code and graphics, and they are formatted using [Markdown syntax](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf). For example:

-   #: a header element.
-   \*\*: bold text.
-   \*: italic text.
-   \` : code blocks.

Overall, the **Visual** interface looks pretty much like a Word document. There is a toolbar that allows you to make bold or italic text, create a bullet list, insert a link or an image, insert a code block, etc.

Now let's delete everything below the YAML header in the template file, so that we will start creating our own formatted report.

### Your practice

In 2014, the City of Cambridge passed a local ordinance on building energy use disclosure. Spend a few moments reviewing [this website](https://www.cambridgema.gov/CDD/zoninganddevelopment/sustainabledevelopment/buildingenergydisclosureordinance) to become familiar with the ordinance (in general). Then, add a short paragraph below your YAML section that explain the following:

-   What does the Building Energy Use Disclosure Ordinance require?
-   What kind of data have been compiled and where to find them?

You may edit your text either in the **"Source"** or **"Visual"** panel, or toggle between them to get familiar with both. Make sure to make gratuitous use of bold, italics, bullet points, etc. in your text. You have access to the "Markdown Quick Reference" directly from RStudio (**Help - Markdown Quick Reference**).

When you finished, save your file and click Render again. You can immediately see your nicely formatted document in a web browser.

# Insert a video

You've probably noticed there is a Youtube video on the Cambridge webpage, which is a recording of their Cambridge Building Emissions Public Forum on September 15, 2022. Let's assume that the video hosted on that webpage might be useful for others who view our rendered document. We can insert the video in Quarto and it will render in the output when we knit the document.

All you need to do is embed the video in your document. Right-click on the video, select "Copy embed code." Then, paste that embed code into your Markdown section **in the** **"Source" panel.**

![](../img/lab1_youtube.PNG)

What we have above is HTML code. A quick explanation without going into lots of detail:

-   The `<iframe>` tag is what inserts the video (or another document) in line with the Markdown text.
-   The `src` attribute provides the URL for the video
-   The remaining attributes outline the specifics of how the video will appear.

For our purposes, the most important of these attributes is **data-external="1"**. This attribute is typically **NOT SPECIFIED** in the embed code you find on the web by default and **YOU WILL NEED TO ADD IT** in order for video content to render in your output. This attribute is currently required for Quarto to properly render video content.

### Your practice

Embed this video in your document after the introductory sentences you have written. Render your document again and inspect your work.

# Download and read data

As you know, Quarto Document integrates both texts and code chunks. Recall that code chunks are where the R code lives in a document. These are easy to spot as shaded blocks leading by `{r}`. (In the Source panel, they always have three backticks followed by `{r}`).

```{verbatim}
{r}
1 + 1
```

In accordance with the ordinance, the City maintains BEUDO data for individual properties from 2015-2022. You can view this data on the [Cambridge Open Data Portal](https://data.cambridgema.gov/Energy-and-the-Environment/Cambridge-Building-Energy-and-Water-Use-Data-Discl/72g6-j7aq/). Take a few moments to explore the dataset by scrolling down the page and viewing the "What's in the Dataset" sections in particular. Now **download this dataset in CSV format.** You can create a new "data" folder in your project folder and save the table there.

Check if you have installed the `tidyverse` package: Click the **Packages** tab in your lower-right panel in RStudio. Type "tidyverse" in the search box. If it's NOT shown in the list, go to your **Console** panel and run `install.packages("tidyverse")`

Insert a code chunk in your Quarto document by going to **Code - Insert Chunk**. I usually use the shortcut key RStudio provides (Alt+Ctrl/Cmd+I). Type a few things in the chunk and make it look like the following:

```{verbatim}
{r}
#| label: "loadtidyverse"
#| message: FALSE
#| warning: FALSE
library(tidyverse)
```

The `label` option is not required, but can be helpful when you render the notebook (otherwise you will see "unnamed-chunk" in the Render tab next to the Console tab). The other chunk options (described [in detail here](https://rmarkdown.rstudio.com/lesson-3.html)) suppress all `warnings` and `messages` that might otherwise appear in the rendered HTML output, making it unnecessarily cluttered and hard to read.

Run this code chunk to load `tidyverse` package. You can either click the green triangle on the top-right of this chunk, or use Ctrl/Cmd+Enter.

**Note:** Why I said running `install.packages("tidyverse")` in the **console** but `library(tidyverse)` in the **code chunk**? You only need to "install" a package once, so there is no need to keep it in the script and run it every time you render the document. However, you must "library" (aka: activate) the package each time to use its functions.

### Your practice

Take a moment to study [the `read_csv()` function](https://r4ds.had.co.nz/data-import.html). As its name suggests, it will read our .csv file into R. Note that `read_csv` is located within the `readr` package, which is part of the `tidyverse` suite of R packages.

1.  **Insert a new code chunk, write a line of code that imports your .csv file and assigns it to an object called `energy`.**

    Run your code chunk. You will be able to see the "energy" variable in your Environment tab.

2.  **Use the functions `colnames()` and `str()` to get some essential information about this dataset.**

    `colnames()` display the names of all columns, and `str()` provides a quick review of the data frame, including the data type of each column (e.g., integer, numeric, factor, character).

```{r include=FALSE}
energy <- read_csv("../data/Cambridge_Building_Energy_Use_Disclosure_Ordinance__BEUDO__Data_2015-2022_20240721.csv")
```

# Key `dplyr` functions

`dplyr` is another package within `tidyverse`, specializing in data manipulation and transformation. It provides a set of functions that work with data frames in a clean and consistent way. Explore more of `dplyr` functionality described [here](https://dplyr.tidyverse.org/) and [here](https://info201.github.io/dplyr.html). We are going to walk through four "verbs" of `dplyr`.

## `Select`: selects a subset of **columns.**

In the `energy` dataset, we probably don't need all of the 46 columns. So we can make it a smaller dataset by specifying a few columns to keep.

`dataset |> select(Column1, Column2)`

**Insert a new code chunk in your document like this one below.** We will only keep 9 columns in the new dataset. You can type the pipe `|>` operator in using Shift+Ctrl/Cmd+M.

```{r}
energy <- energy |>
  select(
    `Data Year`,
    `BEUDO Category`,
    Owner,
    `Year Built`,
    `Primary Property Type - Self Selected`,
    `Total GHG Emissions (Metric Tons CO2e)`,
    `Total GHG Emissions Intensity (kgCO2e/ft2)`,
    Longitude,
    Latitude
  ) 
```

Some of the column names are surrounded by backticks (\`), that's because they include special characters or spaces, which deviate from standard naming conventions. The use of backticks is a means of preserving these unique naming attributes. Just keep typing the column names, dplyr will populate the correct names for you.

## `filter`: Select a subset of **rows**

Now let's create a new dataset that only contains energy use records from MIT buildings.

`dataset |> filter(<condition>)`

Take a look at how we achieve this using the following code:

```{verbatim}
{r}
energy |> 
  filter(Owner == "MASSACHUSETTS INSTITUTE OF TECHNOLOGY")
```

Viewing the new variable `mit_energy`, you'll notice that some entries are missing records for total GHG emissions, which appear as NA under the "Total GHG Emissions (Metric Tons CO2e)" column. If we want to simplify the dataset by keeping only the rows with valid GHG emission records, we can apply this as a `filter` condition. By doing so, we can combine multiple filter conditions using the pipe operator.

Proceed to **insert a new code chunk in your document like the one below**

```{r}
mit_energy <- energy |> 
  filter(Owner == "MASSACHUSETTS INSTITUTE OF TECHNOLOGY") |> 
  filter(!is.na(`Total GHG Emissions (Metric Tons CO2e)`))
```

`is.na()` is a function commonly used to check whether each value in a column is missing (NA). The `!` is a logical negation operator, so `!is.na()` checks for values that are not missing. It returns TRUE for non-missing values and FALSE for missing values.

## `Group_by` + `Summarise`

`Summarise` is usually used in conjunction with `group_by` because the latter changes the scope from operating on the entire dataset to operating on it group-by-group. Go ahead and run the following code and observe the result:

```{r}
mit_energy |> 
  group_by(`Data Year`) |> 
  summarise(count = n())
```

We now have a summary table that says, in our dataset, there are 130 records in 2015, 135 in 2016, and so on. We use `group_by` such that rows are grouped according to `Data Year`, which is the year when the energy record was taken. The result is then passed to `summarise` to count a total number of records per year. By default, the `n()` function creates a new column, which we here name as "count".  

Below we are using the same `group_by` + `summarise` chain to calculate the average GHG emissions of all buildings, and the average GHG emission intensity. Pay attention to how we are giving new names to each of the new columns.

```{r label=annual_mean, message=FALSE, warning=FALSE}
mit_energy |> 
  group_by(year = `Data Year`) |> 
  summarise(count = n(),
            avg_emission = mean(`Total GHG Emissions (Metric Tons CO2e)`),
            avg_intensity = mean(`Total GHG Emissions Intensity (kgCO2e/ft2)`))
```

### Your practice

**Insert a few new code chunks below this one to document your code and show your results.** 

1.  From the `mit_energy` dataset, create a subset of all **non-residential** buildings, which were built **before the year 2000**. (**Hint:** which function would you use?). How many such buildings are there?

2.  From the `mit_energy` dataset, compare the GHG emissions by property type (**Hint:** which column has that information?), and generate a table that shows the following results:

    ![](../img/lab1_table.PNG){width="600"}

**You can create this table mostly by modifying the sample code,** however, there are a few small things you can experiment on:

-   The calculated average numbers in this table are rounded to 2 decimals, how to achieve that?
-   The table is arranged in descending order based on the "avg_emission" column, how to do that? ([Hint](https://dplyr.tidyverse.org/reference/arrange.html))

We are already trying to ask questions and find hints of interesting stories from the dataset! If the results so far look interesting/surprising/expected to you, write a few sentences describing what you see from the analysis.

3.  Lastly, and for fun, we will insert a map to complete your working document! The dataset we have includes "Longitude" and "Latitude" columns, which I love, because it indicates that location information is readily available and can be visualized.

    Add the following code to your document, and you should be able to run it and see a map. (If your R says it can't find `mapview`, run the line `install.packages("mapview")`)

```{r label=mapview, message=FALSE, warning=FALSE}
#install.packages("mapview")
library(mapview)
mapview(
  mit_energy,
  xcol = "Longitude", ycol = "Latitude",
  crs = 4326,
  grid = FALSE
)
```

<b></b>

Now **Save**, **Render** your document again. You have now created a pretty, multi-media document using R!

```         
------
```

In this lab we have introduced how to create and develop a Quarto Document. We have also introduced some commonly-used `dplyr` functions including `select`, `filter`, `group_by` and `summarise`. This is the beginning of our data wrangling and leads to the work in Week 2.
