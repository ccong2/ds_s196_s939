[
  {
    "objectID": "syllabus/index.html",
    "href": "syllabus/index.html",
    "title": "Applied Data Science for Cities",
    "section": "",
    "text": "Description\nUrban data science draws upon statistics, visualization, and computation to better understand and ultimately shape cities. This course emphasizes telling stories about cities using a set of descriptive approaches, quantitative and spatial analysis in R. We will learn how to describe community characteristics with small area census data, work with local administrative data, and think about how our analysis of quantitative data fit with other forms of data and engagement to fill in gaps in knowledge.\nLearning objectives:\n\nLearn - begin developing core data science competencies such as data wrangling, visualization, analysis, and communication;\nApply - apply concepts introduced in the readings and lectures to analyze datasets drawn from cities around the world;\nVisualize - manipulate tabular and geospatial data to produce intelligible and useful graphics for inclusion in documents and dissemination on the web;\nSynthesize - translate the results of visualization and analysis for use in decision-making and policy development.\n\n\nHow Will We Be Learning\nLecture: Class meetings are generally divided into lecture (Mondays) and laboratory sessions (Wednesdays) that focus on concepts and hand-on applications, respectively.\nLab: We will provide data science tutorials using R. Each lab tutorial aims to solve a specific urban data science problem in addition to building coding skills. Lab reports are due before the subsequent lab session and should be written independently.\nExtension readings: We provide a light material list that focuses on specific topics each week. These resources are meant to expand your knowledge and enhance your project completion capabilities.\nUrban data science project: The term project for the course will focus on integrating the tools of data science to explore a specific real-world planning issue or research question. This is a group project and students will define the scope of the project and identify specific deliverable(s) early in the semester. Reproducing an existing analysis or study using different datasets or an alternate study area is also acceptable for the term project.\n\n\nPrerequisites\nThis is a relatively fast-paced course so students can benefit from some prior knowledge working in R and RStudio. However, this is not a course prerequisite. Our first course sessions will focus on ensuring that we are all familiar with some of the basic work environment and methods which we'll make use of over the semester.\n\n\nAssessment\n\n\n\nAssignment\nWeight\n\n\nLab Reports\n50%\n\n\nProject Proposal\n10%\n\n\nProject Presentation\n30%\n\n\nAttendance\n10%\n\n\n\n\n\nKey Logistics\nLab Reports: You will be working on lab on most Wednesday classes and submit a short report before the next lab session. Details will be specified in each assignment submission page on Canvas.\nProject Proposal: Due Monday, Nov 18.\nThe purpose of this memo is to communicate the scope of your project (what you will do) and your strategies for collecting, visualizing, and analyzing data (how you will do it). A separate guideline will be distributed at the beginning of the course.\nProject Presentation: Week 8 (Dec 9 – Dec 11), class time. Presentations slides will due Dec 9.\n\n\nLate policy\nTo keep all students on a relatively level playing field, 5% will be deducted for late assignments, with an additional 5% deducted for each subsequent day. Late assignments two weeks after the due date will receive no credit and will not be accepted.\n\n\nSoftware\nWe use R and R Studio as the coding environment to develop analysis and applications. You will need to install both software on your personal computers from hereLinks to an external site. and hereLinks to an external site..\n\n\nCommunication\nPlan on using our class Slack channel, email, and office hours to get help with troubleshooting problems as they arise in your work. I also encourage you to work with others in the class to troubleshoot problems - it is highly likely that others in the class have encountered similar problems, and this also allows us to create a repository of our problems and responses.\nEmail: I check emails quite frequently, but I will not always be able to respond to emails right away. Please plan accordingly so that you don't miss deadlines.\nSlack: We have a Slack workspace that is accessible through Canvas for general communication, including homework Q&A, resource exchange, project collaboration, etc.\nOffice hours: Please consult the top of the syllabus for specific times. I will announce if there are any changes or exceptions. I'm happy to answer any specific coding questions, or chat and help shape the objective and scope of your projects.\n\n\nEthics\nAcademic Integrity: Violations to academic integrity are unacceptable at MIT and DUSP. Instances of misconduct include but are not limited to plagiarism, cheating, and deliberately unauthorized use of course data and material.\nCollaboration Policy: While team collaboration is encouraged, students should specify their roles and tasks in a project. A positive and constructive attitude toward teamwork is essential for the successful completion of the course.\nDiversity and Inclusion: MIT highly values a diverse, friendly, respectful, and inclusive learning environment among students, faculty, and staff. We welcome all individuals regardless of their origin, citizenship, gender identity, sexual orientation, or religious and political beliefs. Please contact me or departmental staff if you have any questions / considerations regarding this."
  },
  {
    "objectID": "labs/lab1.html",
    "href": "labs/lab1.html",
    "title": "Get started with ",
    "section": "",
    "text": "This exercise provides some more structured exploration and practice with Quarto Document. We will mix Markdown sections with code chunks, and experiment with working with a tabular dataset.\nLab 1 is not graded, and there’s no need to submit anything after you’ve completed it. But for labs after this one, you will complete them and submit your lab report, details will be specified in each lab document.",
    "crumbs": [
      "Labs",
      "01 Cambridge Building Energy: R, Quarto, dplyr essentials"
    ]
  },
  {
    "objectID": "labs/lab1.html#set-up-a-new-project",
    "href": "labs/lab1.html#set-up-a-new-project",
    "title": "Get started with ",
    "section": "Set up a New Project",
    "text": "Set up a New Project\nWe have talked about files paths in class, and the importance of setting a directory to work out of. Most of the time we can use setwd(), this works fine until when you want to move your working folder to another computer or share your work. If you write out a path in the code, it might not work on another computer if that directory does not exist.\nIn our labs, we are going to use R Projects to organize our works and make sure we don’t lose files. R projects organize all files related to a project in one place and setting up relative file paths. Let’s start by setting up a project for our exercise.\nLaunch RStudio, then click File - New Project… A dialog box will open up. Select New Directory, then New Project. Here, you can create a new folder to save everything related to this project. For example, I navigated to my D:/Fall24 folder and created a new folder there called Lab 1:\n\nClick the button “Create Project”. R will take a second to refresh. Then you will see in your Files tab that you have been directed to your current working directory: D:/Fall24/Lab 1. You will also see a .Rproj file in that folder.\n\nThe .Rproj file serves as a reference point that R uses to locate all files associated with the project. If you save all files related to Lab 1 in this folder, all relative paths remain intact and consistently applied.\nNote: In future sessions, I may provide you with a project folder containing data. As long as you launch RStudio by double-clicking the .Rproj file, you will be taken directly to the project’s home directory.",
    "crumbs": [
      "Labs",
      "01 Cambridge Building Energy: R, Quarto, dplyr essentials"
    ]
  },
  {
    "objectID": "labs/lab1.html#practice-formatting-text-with-quarto",
    "href": "labs/lab1.html#practice-formatting-text-with-quarto",
    "title": "Get started with ",
    "section": "Practice formatting text with Quarto",
    "text": "Practice formatting text with Quarto\nNow go to File - New File - Quarto Document to create a new Quarto document. The prompt shown below will appear. Type in a document title (e.g. Lab 1) and your name. Keep the radio button for HTML selected.\n\nYou will then see a template file. At the very top you will see the YAML (or “Yet Another Markdown Language”) header which begins and ends with three dashes ---. The YAML header determines how your document will be rendered to your desired output format. Now it specifies the title, author, output format and text editor.\nTo get an idea of how everything works, let’s click the “Render” button on top of your toolbar.\nWhen prompted, give this file a name, it will be saved in the folder where your “.Rproj” file is, as a .qmd file.\nYou will now see a formatted document in a web browser. Switch between your code and the document back and forth to see where each part of the code is placed in the rendered HTML file.\nNow we can add a new line to the YAML header:\n\ndate: &lt;insert the date that the file is created&gt;.\n\nRender it again and see where the difference is.\nThere can be other options specified in the YAML, particularly if you are rendering to a format other than HTML (such as pdf, or Word, see all formats).\nOn the very left of this toolbar, click the “Source” button to switch Markdown editing mode. These sections of text typically explain or provide context for the code and graphics, and they are formatted using Markdown syntax. For example:\n\n#: a header element.\n**: bold text.\n*: italic text.\n` : code blocks.\n\nOverall, the Visual interface looks pretty much like a Word document. There is a toolbar that allows you to make bold or italic text, create a bullet list, insert a link or an image, insert a code block, etc.\nNow let’s delete everything below the YAML header in the template file, so that we will start creating our own formatted report.\n\nYour practice\nIn 2014, the City of Cambridge passed a local ordinance on building energy use disclosure. Spend a few moments reviewing this website to become familiar with the ordinance (in general). Then, add a short paragraph below your YAML section that explain the following:\n\nWhat does the Building Energy Use Disclosure Ordinance require?\nWhat kind of data have been compiled and where to find them?\n\nYou may edit your text either in the “Source” or “Visual” panel, or toggle between them to get familiar with both. Make sure to make gratuitous use of bold, italics, bullet points, etc. in your text.\nWhen you finish, save your file and click Render again. You can immediately see your nicely formatted document in a web browser.",
    "crumbs": [
      "Labs",
      "01 Cambridge Building Energy: R, Quarto, dplyr essentials"
    ]
  },
  {
    "objectID": "labs/lab1.html#select-selects-a-subset-of-columns.",
    "href": "labs/lab1.html#select-selects-a-subset-of-columns.",
    "title": "Get started with ",
    "section": "Select: selects a subset of columns.",
    "text": "Select: selects a subset of columns.\nIn the energy dataset, we probably don’t need all of the 46 columns. So we can make it a smaller dataset by specifying a few columns to keep.\ndataset |&gt; select(Column1, Column2)\nInsert a new code chunk in your document like this one below. We will only keep 9 columns in the new dataset. You can type the pipe |&gt; operator in using Shift+Ctrl/Cmd+M.\n\nenergy &lt;- energy |&gt;\n  select(\n    `Data Year`,\n    `BEUDO Category`,\n    Owner,\n    `Year Built`,\n    `Primary Property Type - Self Selected`,\n    `Total GHG Emissions (Metric Tons CO2e)`,\n    `Total GHG Emissions Intensity (kgCO2e/ft2)`,\n    Longitude,\n    Latitude\n  ) \n\nSome of the column names are surrounded by backticks (`), that’s because they include special characters or spaces, which deviate from standard naming conventions. The use of backticks is a means of preserving these unique naming attributes. Just keep typing the column names, dplyr will populate the correct names for you.",
    "crumbs": [
      "Labs",
      "01 Cambridge Building Energy: R, Quarto, dplyr essentials"
    ]
  },
  {
    "objectID": "labs/lab1.html#filter-select-a-subset-of-rows",
    "href": "labs/lab1.html#filter-select-a-subset-of-rows",
    "title": "Get started with ",
    "section": "filter: Select a subset of rows",
    "text": "filter: Select a subset of rows\nNow let’s create a new dataset that only contains energy use records from MIT buildings.\ndataset |&gt; filter(&lt;condition&gt;)\nTake a look at how we achieve this using the following code:\n{r}\nenergy |&gt; \n  filter(Owner == \"MASSACHUSETTS INSTITUTE OF TECHNOLOGY\")\nViewing the result, you’ll notice that some entries are missing records for total GHG emissions, which appear as NA under the “Total GHG Emissions (Metric Tons CO2e)” column. If we want to simplify the dataset by keeping only the rows with valid GHG emission records, we can apply that as a filter condition too.\nProceed to insert a new code chunk in your document like the one below. Now we are filtering MIT buildings that have emission data, and we are assigning the result to a new variable “mit_energy”.\n\nmit_energy &lt;- energy |&gt; \n  filter(Owner == \"MASSACHUSETTS INSTITUTE OF TECHNOLOGY\") |&gt; \n  filter(!is.na(`Total GHG Emissions (Metric Tons CO2e)`))\n\nis.na() is a function commonly used to check whether each value in a column is missing (NA). The ! is a logical negation operator, so !is.na() checks for values that are not missing. It returns TRUE for non-missing values and FALSE for missing values.",
    "crumbs": [
      "Labs",
      "01 Cambridge Building Energy: R, Quarto, dplyr essentials"
    ]
  },
  {
    "objectID": "labs/lab1.html#group_by-summarise",
    "href": "labs/lab1.html#group_by-summarise",
    "title": "Get started with ",
    "section": "Group_by + Summarise",
    "text": "Group_by + Summarise\nSummarise is usually used in conjunction with group_by because the latter changes the scope from operating on the entire dataset to operating on it group-by-group. Go ahead and run the following code and observe the result:\n\nmit_energy |&gt; \n  group_by(`Data Year`) |&gt; \n  summarise(count = n())\n\n# A tibble: 8 × 2\n  `Data Year` count\n        &lt;dbl&gt; &lt;int&gt;\n1        2015   130\n2        2016   135\n3        2017   130\n4        2018   136\n5        2019   113\n6        2020   116\n7        2021   139\n8        2022   136\n\n\nWe now have a summary table that says, in our dataset, there are 130 records in 2015, 135 in 2016, and so on. We use group_by such that rows are grouped according to Data Year, which is the year when the energy record was taken. The result is then passed to summarise to count a total number of records per year. By default, the n() function creates a new column, which we here name as “count”.  \nBelow we are using the same group_by + summarise chain to calculate the average GHG emissions of all buildings, and the average GHG emission intensity. Pay attention to how we are giving new names to each of the new columns.\n\nmit_energy |&gt; \n  group_by(year = `Data Year`) |&gt; \n  summarise(count = n(),\n            avg_emission = mean(`Total GHG Emissions (Metric Tons CO2e)`),\n            avg_intensity = mean(`Total GHG Emissions Intensity (kgCO2e/ft2)`))\n\n# A tibble: 8 × 4\n   year count avg_emission avg_intensity\n  &lt;dbl&gt; &lt;int&gt;        &lt;dbl&gt;         &lt;dbl&gt;\n1  2015   130        1575.          13.4\n2  2016   135        1436.          13.2\n3  2017   130        1524.          13.5\n4  2018   136        1449.          13.1\n5  2019   113        1473.          12.6\n6  2020   116        1384.          10.9\n7  2021   139        1407.          11.4\n8  2022   136        1419.          11.4\n\n\n\nYour practice\nInsert a few new code chunks below this one to document your code and show your results. \n\nFrom the mit_energy dataset, create a subset of all non-residential buildings, which were built before the year 2000. (Hint: which function would you use?). How many such buildings are there?\nFrom the mit_energy dataset, compare the GHG emissions by property type (Hint: which column has that information?), and generate a table that shows the following results:\n\n\nYou can create this table mostly by modifying the sample code, however, there are a few small things you can experiment on:\n\nThe calculated average numbers in this table are rounded to 2 decimals, how to achieve that?\nThe table is arranged in descending order based on the “avg_emission” column, how to do that? (Hint)\n\nWe are already trying to ask questions and find hints of interesting stories from the dataset! If the results so far look interesting/surprising/expected to you, write a few sentences describing what you see from the analysis.\n\nLastly, and for fun, we will insert a map to complete your working document! The dataset we have includes “Longitude” and “Latitude” columns, which I love, because it indicates that location information is readily available and can be visualized.\nAdd the following code to your document, and you should be able to run it and see a map. (If your R says it can’t find mapview, run the line install.packages(\"mapview\"))\n\n\n#install.packages(\"mapview\")\nlibrary(mapview)\nmapview(\n  mit_energy,\n  xcol = \"Longitude\", ycol = \"Latitude\",\n  crs = 4326,\n  grid = FALSE\n)\n\n\n\n\n\n\nNow Save, Render your document again. You have now created a pretty, multi-media document using R!\n------\nIn this lab we have introduced how to create and develop a Quarto Document. We have also introduced some commonly-used dplyr functions including select, filter, group_by and summarise. This is the beginning of our data wrangling and leads to the work in Week 2.",
    "crumbs": [
      "Labs",
      "01 Cambridge Building Energy: R, Quarto, dplyr essentials"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Data Science for Cities",
    "section": "",
    "text": "Urban science draws on statistics, visualization, and spatial analysis techniques to gain deeper insights into cities and actively contribute to their development. In this course, we’ll dive into the dynamic world of urban science by learning how to tell stories about cities and neighborhoods, covering a range of topics including demographic analysis, health and transportation, and using R as our primary quantitative analysis and interactive visualization tool.\n\n\n\n\n\n\n\nCourse Information\n\nSchedule: MW 9:30 - 11:00 AM, H2\nLocation: Mondays: 9-451; Wednesdays: 9-554\nCanvas Site: https://canvas.mit.edu/courses/27065"
  },
  {
    "objectID": "howto/setupr.html",
    "href": "howto/setupr.html",
    "title": "Applied Data Science for Cities",
    "section": "",
    "text": "Urban analytics draws upon statistics, visualization, and computation to better understand and ultimately shape cities. This course emphasizes telling stories about cities and neighborhoods covering a set of fundamental concepts of descriptive approaches, quantitative and spatial analysis in R, and principles of reproducible data analysis. Students learn to communicate the results of visualization and analysis for use in decision-making and policy development and to critique those processes.",
    "crumbs": [
      "Resources",
      "Set Up R and RStudio"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "howto/git.html",
    "href": "howto/git.html",
    "title": "Applied Data Science for Cities",
    "section": "",
    "text": "Urban analytics draws upon statistics, visualization, and computation to better understand and ultimately shape cities. This course emphasizes telling stories about cities and neighborhoods covering a set of fundamental concepts of descriptive approaches, quantitative and spatial analysis in R, and principles of reproducible data analysis. Students learn to communicate the results of visualization and analysis for use in decision-making and policy development and to critique those processes.",
    "crumbs": [
      "Resources",
      "Start with GIT"
    ]
  },
  {
    "objectID": "howto/quartoweb.html",
    "href": "howto/quartoweb.html",
    "title": "Applied Data Science for Cities",
    "section": "",
    "text": "Urban analytics draws upon statistics, visualization, and computation to better understand and ultimately shape cities. This course emphasizes telling stories about cities and neighborhoods covering a set of fundamental concepts of descriptive approaches, quantitative and spatial analysis in R, and principles of reproducible data analysis. Students learn to communicate the results of visualization and analysis for use in decision-making and policy development and to critique those processes.",
    "crumbs": [
      "Resources",
      "Publish a Quarto Website"
    ]
  },
  {
    "objectID": "howto/startcode.html",
    "href": "howto/startcode.html",
    "title": "Applied Data Science for Cities",
    "section": "",
    "text": "Urban analytics draws upon statistics, visualization, and computation to better understand and ultimately shape cities. This course emphasizes telling stories about cities and neighborhoods covering a set of fundamental concepts of descriptive approaches, quantitative and spatial analysis in R, and principles of reproducible data analysis. Students learn to communicate the results of visualization and analysis for use in decision-making and policy development and to critique those processes.",
    "crumbs": [
      "Resources",
      "Quick Code Guides"
    ]
  },
  {
    "objectID": "labs/index.html",
    "href": "labs/index.html",
    "title": "Schedule Overview",
    "section": "",
    "text": "Schedule\nW01 (Oct 21 - Oct 25):\n\nCourse Overview\nLab1: Cambridge Building Energy: R, Quarto, dplyr essentials\n\nW02 (Oct 28 - Nov 1):\n\nExploratory Data Analysis\nLab 2: Opportunity Zones: tidyverse, ggplot2 packages\n\nW03 (Nov 4 - Nov 8):\n\nSpatial Analysis; Obtain data from multiple sources\nLab 3: Walkable Environment: sf, osmdata packages\n\nW04 (Nov 11 – Nov 15):\n\nCreate interactive graphs and maps\nLab 4: Airbnb in Chicago: plotly and leaflet packages\n\nW05 (Nov 18 – Nov 22):\n\nCensus Data and Demographic Analysis\nLab 5: Neighborhood Change: tidycensus, tidyr packages\n\nW06 (Nov 25 – Nov 29):\n\nWeb Storytelling I\nLab 6: Build ShinyApps\n\nW07 (Dec 2 – Dec 6):\n\nWeb Storytelling II\nLab 7 (optional): Quarto Website\n\nW08 (Dec 9 – Dec 11):\n\nPresentation",
    "crumbs": [
      "Labs",
      "Schedule"
    ]
  },
  {
    "objectID": "labs/lab1.html#summarise-create-a-summary-of-your-data",
    "href": "labs/lab1.html#summarise-create-a-summary-of-your-data",
    "title": "Get started with ",
    "section": "Summarise: Create a summary of your data",
    "text": "Summarise: Create a summary of your data\nGo ahead and run the following code and observe the result:\n\nmit_energy |&gt; \n  summarise(avg_emission = mean(`Total GHG Emissions (Metric Tons CO2e)`))\n\n# A tibble: 1 × 1\n  avg_emission\n         &lt;dbl&gt;\n1        1458.\n\n\nIt calculates the average of the column “Total GHG Emissions (Metric Tons CO2e)” of the entire dataset, and names the result “avg_emission”. The result says, of all MIT buildings, through all years, the average annual GHG emission is r mean(mit_energy$`Total GHG Emissions (Metric Tons CO2e)`) MTCO2e.\nsummarise calculates summary statistics, like a total, mean, or count, across all values in the dataset. However, when used with group_by(), it calculates each group separately, collapsing each group into its own summary row.\nFor instance, below we calculate the average GHG emissions by Data Year, which is the year when the energy record was taken.\n\nmit_energy |&gt; \n  group_by(year = `Data Year`) |&gt; \n  summarise(avg_emission = mean(`Total GHG Emissions (Metric Tons CO2e)`))\n\n# A tibble: 8 × 2\n   year avg_emission\n  &lt;dbl&gt;        &lt;dbl&gt;\n1  2015        1575.\n2  2016        1436.\n3  2017        1524.\n4  2018        1449.\n5  2019        1473.\n6  2020        1384.\n7  2021        1407.\n8  2022        1419.\n\n\nThis says, in 2015, the average annual GHG emission was ~1575, and in 2016, it was ~1436, so on and so forth.\n\nYour practice\nInsert a few new code chunks below this one to document your code and show your results. \n\nFrom the mit_energy dataset, create a subset of all non-residential buildings, which were built before the year 2000. (Hint: which function would you use?). How many such buildings are there?\nFrom the mit_energy dataset, compare the GHG emissions by property type (Hint: which column has that information?), and generate a table that shows the following results:\n\n\nYou can create this table mostly by modifying the sample code, however, there are a few small things you can experiment on:\n\nThe calculated average numbers in this table are rounded to 2 decimals, how to achieve that?\nThe table is arranged in descending order based on the “avg_emission” column, how to do that? (Hint)\n\nWe are already trying to ask questions and find hints of interesting stories from the dataset! If the results so far look interesting/surprising/expected to you, write a few sentences describing what you see from the analysis.\n\nLastly, and for fun, we will insert a map to complete your working document! The dataset we have includes “Longitude” and “Latitude” columns, which I love, because it indicates that location information is readily available and can be visualized.\nCopy and paste the following code to your document, and you should be able to run it and see a map. (If your R says it can’t find mapview, run the line install.packages(\"mapview\"))\n\n\n#install.packages(\"mapview\")\nlibrary(mapview)\nmapview(\n  mit_energy,\n  xcol = \"Longitude\", ycol = \"Latitude\",\n  crs = 4326,\n  grid = FALSE\n)\n\n\n\n\n\n\nNow Save, Render your document again. You have now created a pretty, multi-media document using R!\n------\nIn this lab we have introduced how to create and develop a Quarto Document. We have also introduced some commonly-used dplyr functions including select, filter, group_by and summarise. This is the beginning of our data wrangling and leads to the work in Week 2.",
    "crumbs": [
      "Labs",
      "01 Cambridge Building Energy: R, Quarto, dplyr essentials"
    ]
  }
]